/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 07.08.2023 16:35:06

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 70128;
#else
constexpr int kTensorArenaSize = 69104;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0035524799022823572, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[8*3*3*1] = { 
  /* [0][0][][] */ -57, 48, 7, 
  /* [0][1][][] */ -127, 118, -2, 
  /* [0][2][][] */ -43, 45, -1, 
  /* [1][0][][] */ 58, 127, 36, 
  /* [1][1][][] */ -65, -76, -41, 
  /* [1][2][][] */ 9, -39, 7, 
  /* [2][0][][] */ 30, 27, -47, 
  /* [2][1][][] */ 51, 68, -127, 
  /* [2][2][][] */ 21, 32, -58, 
  /* [3][0][][] */ 40, 51, 19, 
  /* [3][1][][] */ 51, 72, 24, 
  /* [3][2][][] */ -81, -127, -58, 
  /* [4][0][][] */ 5, -52, 49, 
  /* [4][1][][] */ 17, -127, 113, 
  /* [4][2][][] */ 5, -37, 32, 
  /* [5][0][][] */ 3, -55, 1, 
  /* [5][1][][] */ 0, 127, 3, 
  /* [5][2][][] */ 2, -73, 1, 
  /* [6][0][][] */ -24, -97, 4, 
  /* [6][1][][] */ -26, -127, 2, 
  /* [6][2][][] */ -9, -44, 16, 
  /* [7][0][][] */ 39, -127, 26, 
  /* [7][1][][] */ -22, -6, -12, 
  /* [7][2][][] */ -27, 69, -13, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant2_scale = { 8, { 0.075589723885059357, 0.076210558414459229, 0.072032220661640167, 0.044641386717557907, 0.10468780249357224, 0.11564048379659653, 0.0043546734377741814, 0.014613945037126541, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[8] = { 10145, 7303, 38, 17477, 1430, 5523, 54812, 2023, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 0.00026853097369894385, 0.00027073649107478559, 0.00025589301367290318, 0.00015858763072174042, 0.00037190131843090057, 0.00041081049130298197, 1.5469890058739111e-05, 5.1915747462771833e-05, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*8] = { 
  /* [0][0][][] */ 4,6,19,17,8,3,7,32, 4,5,-30,127,-29,4,-6,31, -7,4,-2,22,-2,3,-8,21, 
  /* [0][1][][] */ -1,2,127,-25,127,3,-115,43, 127,-127,-94,4,-105,127,-16,-127, -33,6,21,-18,-7,3,127,39, 
  /* [0][2][][] */ 3,5,16,7,8,4,14,35, 1,5,-36,2,-17,7,-12,-104, -9,3,-2,5,-5,3,-8,40, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant4_scale = { 8, { 0.014603732153773308, 0.018770372495055199, 0.010055534541606903, 0.012272151187062263, 0.013227809220552444, 0.013472072780132294, 0.049726363271474838, 0.10915084928274155, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[8] = { -9983, 9234, 31, -13855, 467, -16348, 629, 138, };
const TfArray<1, int> tensor_dimension5 = { 1, { 8 } };
const TfArray<8, float> quant5_scale = { 8, { 0.00034361722646281123, 0.00044165583676658571, 0.00023660081205889583, 0.0002887565060518682, 0.00031124256202019751, 0.00031698995735496283, 0.0011700320756062865, 0.0025682554114609957, } };
const TfArray<8, int> quant5_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*8] = { 
  /* [0][0][][] */ -26,-9,-41,-42,-24,34,-127,-11, 
  /* [1][0][][] */ 11,100,-6,127,3,-11,-10,-34, 
  /* [2][0][][] */ 127,-2,-27,-48,-60,42,99,-52, 
  /* [3][0][][] */ 16,-127,49,-81,18,-84,36,56, 
  /* [4][0][][] */ 122,1,-66,-2,31,-1,-127,-48, 
  /* [5][0][][] */ 7,-35,6,41,6,-127,3,7, 
  /* [6][0][][] */ 127,-26,118,5,115,-26,-13,-2, 
  /* [7][0][][] */ -127,-4,-92,-10,-95,10,33,9, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0029105192515999079, 0.0052177123725414276, 0.0036734475288540125, 0.0025810897350311279, 0.0050650443881750107, 0.0086256777867674828, 0.0038471417501568794, 0.0080115515738725662, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 4927, -5122, -519, 3396, 1749, 628, -2737, 2795, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 6.8482804636005312e-05, 0.00012276970664970577, 8.6434061813633889e-05, 6.0731523262802511e-05, 0.00011917751544388011, 0.00020295713329687715, 9.0520981757435948e-05, 0.00018850709602702409, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -104,-106,31,-127,-65,-9,-9,2, 
  /* [1][0][][] */ -127,-12,98,5,-52,18,7,11, 
  /* [2][0][][] */ 9,-7,15,127,11,-17,-23,4, 
  /* [3][0][][] */ -103,-59,-22,-17,44,127,-51,-37, 
  /* [4][0][][] */ -1,-31,-7,2,-11,4,-127,-63, 
  /* [5][0][][] */ 1,-29,-16,-5,-9,10,-127,-69, 
  /* [6][0][][] */ 127,7,17,-10,-60,20,4,-9, 
  /* [7][0][][] */ -127,-29,-19,9,78,15,3,3, 
  /* [8][0][][] */ 22,40,-15,-16,-31,-127,34,20, 
  /* [9][0][][] */ 75,17,-12,-3,-21,-2,-5,127, 
  /* [10][0][][] */ 103,-12,-102,17,-91,-15,30,127, 
  /* [11][0][][] */ -127,117,0,-20,77,-50,13,23, 
  /* [12][0][][] */ 127,-34,-108,17,51,-5,-8,-21, 
  /* [13][0][][] */ 127,11,15,-13,-25,29,11,-12, 
  /* [14][0][][] */ -112,-86,82,-28,76,-10,-38,-127, 
  /* [15][0][][] */ 30,89,-6,0,-16,-127,-29,13, 
  /* [16][0][][] */ -14,-63,15,5,9,127,15,2, 
  /* [17][0][][] */ 32,-127,-87,-20,-37,122,-55,-19, 
  /* [18][0][][] */ 40,-14,-10,-22,-15,30,127,-15, 
  /* [19][0][][] */ -4,25,-7,-127,-11,39,-7,-8, 
  /* [20][0][][] */ -86,-23,81,11,47,98,-13,-127, 
  /* [21][0][][] */ -26,0,34,-18,-24,17,-127,-79, 
  /* [22][0][][] */ 65,-2,20,127,-12,-22,56,31, 
  /* [23][0][][] */ 123,-10,-127,-14,28,-16,4,11, 
  /* [24][0][][] */ -30,20,22,27,10,5,-127,-74, 
  /* [25][0][][] */ 127,10,-85,8,15,-5,10,26, 
  /* [26][0][][] */ 2,48,-31,-127,-27,18,0,0, 
  /* [27][0][][] */ 127,12,-102,5,-95,41,31,75, 
  /* [28][0][][] */ -127,-22,-23,13,56,11,-8,38, 
  /* [29][0][][] */ -12,-124,-19,-127,-18,26,-24,-18, 
  /* [30][0][][] */ 6,98,124,45,51,-105,127,34, 
  /* [31][0][][] */ -63,-6,-127,37,7,-30,88,104, 
  /* [32][0][][] */ -1,-127,-1,-126,-7,16,-6,-25, 
  /* [33][0][][] */ 23,-127,-7,-120,8,12,8,-26, 
  /* [34][0][][] */ -30,-53,28,-111,38,-66,127,94, 
  /* [35][0][][] */ -127,16,48,8,-113,-22,36,89, 
  /* [36][0][][] */ -113,19,127,3,-33,11,-44,22, 
  /* [37][0][][] */ 127,10,-9,-10,-67,22,4,14, 
  /* [38][0][][] */ -73,-6,63,33,46,-44,49,127, 
  /* [39][0][][] */ -127,-8,76,8,-75,12,-6,10, 
  /* [40][0][][] */ -1,37,28,-29,30,-2,127,45, 
  /* [41][0][][] */ 127,-17,-82,5,49,15,-1,0, 
  /* [42][0][][] */ -8,-127,27,-13,22,7,0,-17, 
  /* [43][0][][] */ 14,115,127,10,51,-95,78,11, 
  /* [44][0][][] */ 6,-6,-3,108,4,-127,-6,2, 
  /* [45][0][][] */ 127,-37,42,2,-73,108,5,7, 
  /* [46][0][][] */ 18,116,-20,99,6,127,29,38, 
  /* [47][0][][] */ -20,47,13,-20,22,-35,127,74, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0049240007065236568, 0.0075290943495929241, 0.0017575910314917564, 0.011618158780038357, 0.0080229137092828751, 0.0074896104633808136, 0.02516821026802063, 0.015845213085412979, 0.013515179045498371, 0.0065415888093411922, 0.0014938258100301027, 0.006262999027967453, 0.0057077477686107159, 0.01422673836350441, 0.0059705893509089947, 0.020215893164277077, 0.0138259157538414, 0.0038225350435823202, 0.014753344468772411, 0.019417040050029755, 0.0089194849133491516, 0.0043851239606738091, 0.0011640335433185101, 0.0055681583471596241, 0.016879422590136528, 0.0099376887083053589, 0.011691640131175518, 0.0047459043562412262, 0.013582514598965645, 0.0089621543884277344, 0.0034409058280289173, 0.0063390973955392838, 0.0099332360550761223, 0.0027559732552617788, 0.0045086024329066277, 0.0048021641559898853, 0.0067521571181714535, 0.018833057954907417, 0.0070628095418214798, 0.0076698735356330872, 0.018662281334400177, 0.0080960104241967201, 0.01006537489593029, 0.0030838178936392069, 0.016737677156925201, 0.008555486798286438, 0.0088588763028383255, 0.0071108881384134293, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 11692, 4786, 6576, 2047, 3549, 3648, -4471, 4249, 2956, -2881, -2961, 3889, -3470, -5145, 8044, 1501, -2160, 2929, -2044, 3205, 384, 4835, 4517, -2708, -147, -5148, 3004, -3739, 4122, 8291, -380, 423, 7772, 12180, 9895, 4432, 5129, -4724, 1067, 4722, -894, -4517, 4193, 545, 330, -6846, -11985, 1483, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00037761131534352899, 0.00057739048497751355, 0.00013478597975336015, 0.00089097232557833195, 0.00061526050558313727, 0.00057436258066445589, 0.0019300974672660232, 0.0012151362607255578, 0.0010364508489146829, 0.00050166074652224779, 0.00011455838102847338, 0.00048029629397206008, 0.00043771523633040488, 0.0010910187847912312, 0.00045787202543579042, 0.0015503145987167954, 0.0010602805996313691, 0.00029314222047105432, 0.001131403143517673, 0.0014890521997585893, 0.00068401667522266507, 0.00033628600067459047, 8.9267297880724072e-05, 0.00042701041093096137, 0.001294447691179812, 0.00076210056431591511, 0.00089660746743902564, 0.00036395349889062345, 0.0010416146833449602, 0.00068728887708857656, 0.00026387587422505021, 0.00048613213584758341, 0.00076175911817699671, 0.0002113498339895159, 0.00034575531026348472, 0.00036826793802902102, 0.00051780883222818375, 0.0014442678075283766, 0.0005416321218945086, 0.00058818655088543892, 0.0014311713166534901, 0.00062086613615974784, 0.00077189254807308316, 0.00023649154172744602, 0.0012835775269195437, 0.00065610237652435899, 0.00067936867708340287, 0.00054531916975975037, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -13,-88,-111,54,-86,4,-95,-70,68,85,83,-33,4,4,-89,-55,121,-89,25,-45,-19,-98,-46,-79,101,106,1,-109,9,-51,69,73,57,50,66,11,93,121,58,17,-104,1,33,46,-28,50,-50,-97, 74,-1,26,56,-127,43,-61,17,114,88,73,86,-3,-60,-127,-127,127,-42,97,-64,-96,127,127,22,127,97,53,-111,-89,-64,-115,126,114,127,101,116,-9,90,51,-71,-84,-84,24,-53,-44,97,-58,106, 121,-7,67,52,-78,12,-19,-13,32,79,-46,-17,-73,1,-31,-62,17,83,71,-10,-73,-16,-82,60,46,39,21,-59,-13,-50,28,41,45,89,26,71,6,24,59,-9,-42,-7,-2,14,-9,7,-36,-1, 
  /* [0][1][][] */ 66,-127,127,95,91,-73,-127,-127,117,96,81,-40,16,-8,-78,-85,109,127,35,-104,-54,111,25,-127,95,121,114,-127,4,-89,-80,114,124,-3,89,45,38,94,78,5,1,-10,95,95,-110,117,-86,113, 127,-2,2,127,123,-127,-80,-1,127,127,96,78,-24,-127,-106,-122,125,60,127,-127,-127,-116,-120,40,98,127,127,-112,-127,-127,127,127,127,2,127,127,3,127,127,-127,10,-127,127,-86,-127,127,-127,-127, 115,-11,-110,74,89,-59,-28,-13,26,91,-50,-17,-127,-3,-20,-44,23,-96,80,-51,-87,14,83,66,61,60,4,-67,-19,-64,-33,29,35,-12,42,67,11,-17,64,-5,-10,-12,35,-15,-75,0,-43,11, 
  /* [0][2][][] */ 64,-78,-9,34,-2,66,-89,-77,20,28,-33,70,18,-2,-17,-17,32,-38,17,-62,-23,4,18,-64,39,28,83,-34,11,-82,7,4,94,-93,56,8,-127,27,30,3,42,11,89,-127,-58,96,-80,-12, 36,12,-9,60,7,94,-22,-8,14,49,-42,-127,-7,-82,-12,-38,38,-11,35,-77,-45,-9,-21,27,44,41,91,-54,-105,-100,-36,13,87,-97,59,22,33,17,48,-54,127,-55,123,99,-90,89,-107,15, -24,-9,3,35,-19,41,-21,-8,-4,20,-127,54,-53,-3,1,-7,-15,28,24,7,-43,29,23,34,43,41,35,-14,-13,-51,20,-13,-5,-59,30,19,17,-21,23,8,62,3,34,-6,-17,41,-33,-4, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0041685453616082668, 0.0056850910186767578, 0.021487407386302948, 0.0024687927216291428, 0.019243264570832253, 0.025696977972984314, 0.0067050973884761333, 0.0073775793425738811, 0.0026884693652391434, 0.010721799917519093, 0.0198360625654459, 0.010736942291259766, 0.011018619872629642, 0.0074332207441329956, 0.002942526014521718, 0.0024878454860299826, 0.0035534442868083715, 0.021975532174110413, 0.0024756509810686111, 0.0048601073212921619, 0.0024099049624055624, 0.033698346465826035, 0.049691811203956604, 0.013553373515605927, 0.0017085561994463205, 0.0057226088829338551, 0.0043091485276818275, 0.0050219176337122917, 0.0066929101012647152, 0.0058614746667444706, 0.016730142757296562, 0.023832187056541443, 0.0035027861595153809, 0.010465680621564388, 0.0037573259323835373, 0.0033407777082175016, 0.012790502049028873, 0.014889384619891644, 0.0049008200876414776, 0.0083740707486867905, 0.0038083437830209732, 0.011913737282156944, 0.0039290809072554111, 0.014719260856509209, 0.0033070007339119911, 0.0095559097826480865, 0.0037796825636178255, 0.02176361158490181, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 2060, 7574, 636, 4610, -194, 228, 6993, 7321, 130, -6443, 873, -1782, 5532, 4277, 17832, 20779, 5169, -1392, 4863, 7810, 18480, -1340, -242, 133, 7062, -746, 1821, 21301, 7893, 11251, 451, 1118, -310, -1504, -5553, 2284, -2558, 172, 35, 3431, 2605, 4410, -4646, 845, -1154, -299, 11018, -221, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 9.8083422926720232e-05, 0.00013376685092225671, 0.00050558603834360838, 5.8089241065317765e-05, 0.00045278269681148231, 0.00060463481349870563, 0.00015776700456626713, 0.00017359010234940797, 6.325810682028532e-05, 0.00025227764854207635, 0.00046673088218085468, 0.00025263393763452768, 0.00025926163652911782, 0.00017489930905867368, 6.9235909904818982e-05, 5.8537541917758062e-05, 8.361045183846727e-05, 0.00051707134116441011, 5.8250610891263932e-05, 0.00011435546912252903, 5.6703647715039551e-05, 0.00079290231224149466, 0.001169219147413969, 0.00031890292302705348, 4.0201324736699462e-05, 0.00013464962830767035, 0.00010139173537027091, 0.00011816276673926041, 0.00015748024452477694, 0.00013791705714538693, 0.00039365043630823493, 0.00056075735483318567, 8.2418497186154127e-05, 0.0002462513220962137, 8.8407672592438757e-05, 7.860653568059206e-05, 0.00030095299007371068, 0.00035033846506848931, 0.00011531341442605481, 0.00019703696307260543, 8.9608089183457196e-05, 0.00028032323461957276, 9.2448965006042272e-05, 0.00034633555333130062, 7.7811782830394804e-05, 0.00022484494547825307, 8.8933709776028991e-05, 0.00051208498189225793, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ 48,103,-37,68,2,-2,-17,6,64,-59,-4,-26,17,9,-32,-51,-3,-19,24,14,-54,-25,-29,2,20,11,28,-6,12,13,-26,21,-64,3,105,-127,-24,19,-16,100,-35,21,7,-5,-15,35,21,-44, 
  /* [1][0][][] */ 1,-58,42,56,-8,-16,-24,-20,48,-54,92,43,24,8,-51,-90,127,44,15,7,-80,33,41,-4,-52,-105,-33,-51,-8,-57,50,-46,-15,-19,-37,13,5,-14,87,-58,-9,39,-65,40,76,71,9,51, 
  /* [2][0][][] */ 87,-26,-15,-21,110,115,62,79,-23,-5,3,-34,-11,45,63,32,-25,-29,55,-76,-40,-49,-49,55,-93,-97,127,18,61,-76,-60,18,-120,89,112,24,-7,-1,-2,19,26,68,16,-72,-18,16,65,-45, 
  /* [3][0][][] */ 79,-34,6,-8,118,127,28,47,-36,-26,21,57,-112,44,71,14,-2,12,65,-104,-88,15,37,79,10,-39,53,20,41,-49,3,-11,-117,54,-69,-109,21,-34,75,-45,43,-85,-108,-24,-68,35,-23,61, 
  /* [4][0][][] */ 38,38,-26,-41,-18,-11,-25,-16,0,-8,-7,-17,-33,-27,63,51,-42,-22,-35,41,31,-18,-18,8,-52,-44,-10,56,-10,12,-18,26,-31,-10,26,-127,-13,33,17,59,14,-19,-5,-23,41,5,91,-25, 
  /* [5][0][][] */ 63,53,-84,41,4,5,-17,26,-86,-68,-59,-21,41,15,37,31,44,-60,47,125,-75,-47,-49,51,38,-25,-38,72,40,33,-53,8,-7,-3,-58,5,-9,15,-18,63,25,80,0,-39,127,35,17,-54, 
  /* [6][0][][] */ -26,-76,17,-44,-41,-39,-79,-78,-30,-58,-116,45,-55,-48,101,95,-127,9,22,-14,20,62,73,2,-5,-5,-71,87,-87,-41,43,78,14,-64,89,44,27,45,-7,-92,-18,-57,-31,14,-42,-22,-10,69, 
  /* [7][0][][] */ 77,28,-24,42,16,15,12,4,79,-12,-17,-25,56,0,-7,-24,-56,-5,-34,0,3,-19,-22,-31,67,-127,13,-8,-2,100,-25,17,-80,20,-64,-41,-16,28,28,33,17,60,-36,-23,-49,26,39,-24, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0069135203957557678, 0.0041996301151812077, 0.0038916764315217733, 0.0028474556747823954, 0.0057435589842498302, 0.0044042388908565044, 0.0046371752396225929, 0.0055389534682035446, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { -10772, 3025, -18545, 1844, 2986, -3781, 10370, 1742, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.0001626710727578029, 9.8814831289928406e-05, 9.156885789707303e-05, 6.6998960392083973e-05, 0.00013514255988411605, 0.00010362915054429322, 0.00010911000572377816, 0.00013032832066528499, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ -18,22,-6,-127,-98,-2,40,111, 
  /* [1][0][][] */ 126,17,-2,13,-112,65,127,48, 
  /* [2][0][][] */ -16,112,-41,-28,-37,104,-58,-127, 
  /* [3][0][][] */ 78,-80,-103,123,-127,-42,-4,-35, 
  /* [4][0][][] */ 38,-67,41,-29,-127,-3,38,27, 
  /* [5][0][][] */ -9,56,-15,-97,-127,-10,-32,2, 
  /* [6][0][][] */ 42,-12,34,26,127,-35,-16,-110, 
  /* [7][0][][] */ 9,37,22,127,23,-3,-5,18, 
  /* [8][0][][] */ 16,35,25,-50,34,127,8,-22, 
  /* [9][0][][] */ 99,45,-4,33,-63,-40,127,78, 
  /* [10][0][][] */ 7,77,-83,-35,9,127,90,-67, 
  /* [11][0][][] */ -21,-41,-127,101,-67,24,-18,88, 
  /* [12][0][][] */ -89,-81,45,42,26,-127,-39,3, 
  /* [13][0][][] */ 35,35,30,52,-63,127,13,-34, 
  /* [14][0][][] */ 0,-90,3,-3,-71,-68,-127,102, 
  /* [15][0][][] */ -85,43,-3,7,80,-1,-127,-38, 
  /* [16][0][][] */ 82,73,-86,-127,49,114,96,32, 
  /* [17][0][][] */ -112,127,-123,34,-7,-17,6,-114, 
  /* [18][0][][] */ 28,-12,-89,127,-17,-39,-35,-48, 
  /* [19][0][][] */ 127,25,19,20,-35,-1,125,36, 
  /* [20][0][][] */ 53,-90,-82,127,52,-42,-32,-71, 
  /* [21][0][][] */ 19,52,127,-113,38,-34,17,-96, 
  /* [22][0][][] */ -88,-48,-127,66,-20,20,14,109, 
  /* [23][0][][] */ 93,23,33,31,-118,127,82,-66, 
  /* [24][0][][] */ -12,0,-127,76,-37,24,37,59, 
  /* [25][0][][] */ 37,-37,-64,127,37,-12,-35,-15, 
  /* [26][0][][] */ -85,26,127,-105,-4,24,56,3, 
  /* [27][0][][] */ -81,96,127,7,13,-4,89,25, 
  /* [28][0][][] */ -51,-120,51,-127,-21,5,-4,-38, 
  /* [29][0][][] */ -83,-78,-15,75,-2,-127,-29,61, 
  /* [30][0][][] */ -127,56,93,-22,32,37,47,33, 
  /* [31][0][][] */ -55,50,82,-127,-42,18,29,62, 
  /* [32][0][][] */ -71,94,111,-102,-5,-8,13,127, 
  /* [33][0][][] */ 6,127,-47,55,27,32,-123,-30, 
  /* [34][0][][] */ 98,-1,123,-117,-101,-127,74,-65, 
  /* [35][0][][] */ 84,0,36,122,71,-74,37,-127, 
  /* [36][0][][] */ 27,67,127,-104,24,-38,57,-126, 
  /* [37][0][][] */ -38,-47,90,45,12,-127,75,-21, 
  /* [38][0][][] */ 74,13,86,50,-33,-64,127,22, 
  /* [39][0][][] */ 51,-86,-18,14,-127,15,80,71, 
  /* [40][0][][] */ -23,17,-120,92,-33,59,-98,127, 
  /* [41][0][][] */ -127,-10,-61,-12,122,24,-110,11, 
  /* [42][0][][] */ -89,65,-23,-38,127,39,-104,-63, 
  /* [43][0][][] */ 109,98,-25,127,-12,-81,34,81, 
  /* [44][0][][] */ 7,31,118,-8,58,-127,8,-26, 
  /* [45][0][][] */ -11,-75,127,81,-32,-23,-114,19, 
  /* [46][0][][] */ 55,-127,-115,61,-64,15,-15,4, 
  /* [47][0][][] */ -111,-38,31,-2,94,36,-127,-54, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0031077568419277668, 0.0054097850807011127, 0.00097027997253462672, 0.004815349355340004, 0.0097720678895711899, 0.0024530389346182346, 0.0037090487312525511, 0.0081513505429029465, 0.0044178520329296589, 0.0071544270031154156, 0.0019732294604182243, 0.0061056539416313171, 0.0042578764259815216, 0.0040522417984902859, 0.0038156993687152863, 0.0058060823939740658, 0.0031786912586539984, 0.0035421166103333235, 0.0072060511447489262, 0.0051784017123281956, 0.0038623176515102386, 0.0063175717368721962, 0.0052114082500338554, 0.0018038343405351043, 0.00066644197795540094, 0.0044321673922240734, 0.0036640972830355167, 0.0038059081416577101, 0.0081209931522607803, 0.0025424633640795946, 0.0021705850958824158, 0.00146995868999511, 0.0015215262537822127, 0.0034309185575693846, 0.0022653038613498211, 0.0032683731988072395, 0.0050075724720954895, 0.003367941826581955, 0.0024400136899203062, 0.0039974241517484188, 0.0033730159047991037, 0.0019477253081277013, 0.001963052898645401, 0.0049684769473969936, 0.0025172063615173101, 0.0057887188158929348, 0.0039450940676033497, 0.0064282915554940701, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 5283, 1966, 25798, -1894, -658, 9316, -1306, 1394, 3154, -30, 9392, 307, 2314, 3704, 3172, 2585, 3499, 2577, -920, 3099, 1997, 167, 949, 10750, 49430, 3705, 4787, -2406, -41, 7094, 8668, 14393, 12826, 4778, 7795, -1648, 646, 2941, 7439, 4436, 1105, 10111, 12346, 3096, 7052, 2162, 4043, 656, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00015305062697734684, 0.00026642080047167838, 4.7784291382413357e-05, 0.00023714604321867228, 0.00048125424655154347, 0.00012080711894668639, 0.00018266301776748151, 0.0004014372534584254, 0.00021757012291345745, 0.00035234080860391259, 9.7177493444178253e-05, 0.00030069091008044779, 0.00020969165780115873, 0.00019956457254011184, 0.00018791534239426255, 0.0002859376254491508, 0.00015654400340281427, 0.00017444195691496134, 0.00035488320281729102, 0.00025502563221380115, 0.00019021119805984199, 0.00031112739816308022, 0.00025665113935247064, 8.883512782631442e-05, 3.2820895285112783e-05, 0.00021827511955052614, 0.00018044924945570529, 0.00018743315013125539, 0.00039994221879169345, 0.0001252110960194841, 0.00010689684859244153, 7.2392438596580178e-05, 7.4932038842234761e-05, 0.00016896567831281573, 0.00011156155233038589, 0.00016096065519377589, 0.00024661264615133405, 0.00016586419951636344, 0.00012016565597150475, 0.00019686491577886045, 0.00016611409955658019, 9.5921466709114611e-05, 9.6676318207755685e-05, 0.00024468728224746883, 0.00012396724196150899, 0.00028508249670267105, 0.00019428777159191668, 0.00031658014631830156, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ -1,-34,40,-28,127,-12,4,-10,-41,51,0,10,57,16,127,-32,20,-38,-59,-14,-26,-14,-69,19,-127,47,34,-51,-22,30,-15,4,-27,46,20,-4,80,73,30,-8,64,8,-18,4,-99,-18,-32,-33, 6,-90,-67,-32,-73,-5,45,23,14,1,54,127,-28,48,-97,127,1,-85,15,-57,-64,-127,-85,70,-114,-79,15,105,16,35,122,11,-127,-80,-41,36,127,-106,119,14,72,-15,-27,-6,-51,-15,73,9, 16,-21,-13,127,55,11,-59,-8,-35,-38,-29,-16,39,8,-88,-40,22,5,-34,-6,8,5,-26,16,-46,-53,-29,38,3,37,-81,-11,15,80,22,21,1,109,-127,2,45,-7,-12,30,-127,0,-55,53, 
  /* [0][1][][] */ -100,-54,127,-11,-48,-47,84,22,11,99,18,15,53,28,114,34,36,-127,123,42,74,-2,60,-41,-11,-16,36,-50,15,54,35,59,41,-66,8,127,7,68,-45,-116,28,79,-23,-75,42,-81,-59,23, 127,-54,-63,-76,9,-127,127,127,127,18,127,-39,-127,9,-57,-35,127,-110,127,127,127,92,127,-127,9,-23,92,-17,127,127,-127,127,32,-97,127,-104,-68,127,-109,125,-127,-127,127,-127,117,-127,127,-109, -5,-98,9,73,-22,-5,-30,11,-22,-127,-41,48,84,21,-87,47,23,-24,-27,20,6,-18,49,-21,3,15,-127,96,-85,13,81,14,-13,-89,-10,-43,59,37,122,11,43,43,-48,9,70,-28,-54,127, 
  /* [0][2][][] */ -1,127,32,-26,96,4,-23,-16,-35,15,0,-8,74,19,99,12,-21,-17,9,-55,-23,17,7,12,-16,-26,30,-11,-71,-117,-2,-3,0,21,-14,34,-59,45,14,104,25,21,-6,3,33,-10,-23,-39, 5,104,-39,17,52,-35,10,31,35,10,23,-44,53,127,-98,-69,-4,-61,98,-91,-42,85,4,46,81,127,-5,127,-89,-124,-14,-7,95,-127,-76,-1,-69,-64,-30,-127,66,-17,-61,74,63,14,4,17, 12,127,-9,30,44,13,-41,-16,-31,-20,-12,-13,74,10,-95,1,-15,-17,-59,-29,-1,10,-4,2,-28,36,-46,32,27,-86,25,-4,6,27,6,-16,-47,69,15,-2,-13,-3,0,-23,21,1,-8,36, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.013337967917323112, 0.0052700843662023544, 0.018905071541666985, 0.0062280092388391495, 0.0050715263932943344, 0.012192238122224808, 0.013369903899729252, 0.0078919986262917519, 0.010354649275541306, 0.0061474256217479706, 0.016114909201860428, 0.006753984373062849, 0.0062757972627878189, 0.0057765352539718151, 0.004842796828597784, 0.016096161678433418, 0.011369608342647552, 0.002541225403547287, 0.0055240304209291935, 0.014366166666150093, 0.012256496585905552, 0.010540354996919632, 0.0063673574477434158, 0.029701616615056992, 0.008962143212556839, 0.012450799345970154, 0.0096142599359154701, 0.0068764197640120983, 0.0099641997367143631, 0.0069813188165426254, 0.017452839761972427, 0.022973375394940376, 0.016558598726987839, 0.0052572875283658504, 0.018959520384669304, 0.0094171473756432533, 0.0064467834308743477, 0.0043157627806067467, 0.015035612508654594, 0.030654635280370712, 0.0079381754621863365, 0.0271481703966856, 0.017541814595460892, 0.0068656308576464653, 0.0077270208857953548, 0.0053008138202130795, 0.011002913117408752, 0.011199564673006535, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -2028, -24, -239, 245, 380, 9820, -1070, -3568, -5326, -1128, -6758, 1177, -5153, -5269, 1786, -1270, -8658, 21185, -3003, 239, -1846, -916, -1879, 648, 16377, -857, 98, -801, 885, 640, -380, -8042, -779, 10056, -1674, 5777, 16, -5912, -37, -130, -5002, 371, 5554, 5382, -2836, 8682, -244, -2500, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00031383454916067421, 0.00012400199193507433, 0.00044482521479949355, 0.00014654139522463083, 0.00011933003406738862, 0.00028687619487755001, 0.00031458598095923662, 0.00018569409439805895, 0.000243638816755265, 0.00014464530977420509, 0.00037917433655820787, 0.00015891727525740862, 0.00014766582171432674, 0.0001359184825560078, 0.00011394816101528704, 0.00037873320979997516, 0.00026752019766718149, 5.9793539548991248e-05, 0.0001299771829508245, 0.00033802745747379959, 0.00028838816797360778, 0.00024800834944471717, 0.00014982017455622554, 0.00069886160781607032, 0.00021087395725771785, 0.00029296000138856471, 0.00022621788957621902, 0.0001617981179151684, 0.00023445175611414015, 0.00016426632646471262, 0.00041065504774451256, 0.00054055004147812724, 0.00038961408426985145, 0.00012370088370516896, 0.00044610636541619897, 0.00022157994681037962, 0.00015168901882134378, 0.00010154736082768068, 0.00035377911990508437, 0.0007212855271063745, 0.00018678059859666973, 0.00063878047512844205, 0.00041274857358075678, 0.00016154425975400954, 0.00018181225459557027, 0.00012472503294702619, 0.00025889207608997822, 0.00026351917767897248, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ 30,-48,88,60,28,-36,23,7,-8,46,-36,14,-47,-83,39,1,-101,55,-30,56,-45,60,4,-23,-10,-50,58,-25,-27,20,-33,102,-64,-15,-32,-78,-66,-42,-37,-16,-7,50,-127,12,44,30,20,46, 
  /* [1][0][][] */ -52,-26,71,-8,-32,24,-36,-27,55,-4,5,-28,-24,18,-1,16,-1,29,9,-2,-47,-21,-74,-26,32,-29,-27,-34,25,-73,-6,-127,1,-52,-68,-80,-51,-94,-27,29,44,-9,90,-108,-43,-24,-19,1, 
  /* [2][0][][] */ -60,100,-14,31,18,13,24,-39,66,-51,60,77,101,7,35,-46,91,-4,5,27,-18,11,15,127,-121,-52,4,-18,7,92,-23,-80,-25,-4,10,-69,-15,7,-38,-14,85,-82,18,4,22,-118,-6,-16, 
  /* [3][0][][] */ 53,-13,-68,37,93,-83,9,-114,-45,-2,-67,-85,-12,127,-8,17,-41,-22,-58,-43,41,86,-14,-47,101,37,56,-62,39,-94,68,-55,55,67,127,-71,-47,27,-29,54,30,93,-89,23,-6,30,7,39, 
  /* [4][0][][] */ -44,32,-35,72,89,-30,30,-44,-35,1,-55,27,-44,-14,2,-51,12,63,-29,-33,-39,32,-66,-67,23,-3,14,-40,35,-33,-30,58,-1,69,-65,-64,-52,-66,-35,-2,57,-48,127,20,10,81,-49,-44, 
  /* [5][0][][] */ 57,6,81,-6,-1,17,45,35,127,3,70,4,73,44,25,-57,-17,27,36,-40,-46,-64,17,39,25,-7,30,45,-41,-29,16,-19,-23,53,-17,54,40,6,-24,-37,-3,67,35,31,-11,1,71,10, 
  /* [6][0][][] */ 1,-55,-23,-2,40,-7,-12,13,-50,-28,91,54,97,62,-27,53,115,-127,-11,-12,-11,-54,-88,37,-83,57,-36,3,-14,-45,54,-38,83,5,-67,-14,-48,6,50,3,79,-75,-12,-61,-105,54,-50,23, 
  /* [7][0][][] */ -9,-19,-46,-36,22,100,-4,-2,-9,-54,-127,-87,48,39,-47,-42,-31,30,94,23,-1,-68,59,-17,102,-26,-76,91,-35,-7,-16,-72,-41,66,52,105,80,-49,-20,-36,-11,-7,35,-11,-1,-24,-3,-54, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0055351294577121735, 0.004813268780708313, 0.0064552025869488716, 0.0068759284913539886, 0.005904247984290123, 0.0057240794412791729, 0.0037777028046548367, 0.0056402189657092094, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 11361, 13344, 4210, 3539, -6, -14485, 6985, -6603, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.000130238346173428, 0.00011325338709866628, 0.00015188712859526277, 0.00016178654914256185, 0.00013892348215449601, 0.00013468421821016818, 8.8887129095382988e-05, 0.00013271103671286255, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 31,31,-59,20,-27,38,-127,24, 
  /* [1][0][][] */ 15,-70,-106,-6,-11,-18,127,-108, 
  /* [2][0][][] */ -111,-43,-64,-37,-29,58,-127,7, 
  /* [3][0][][] */ -48,-38,31,-14,-19,-127,-118,-19, 
  /* [4][0][][] */ -38,-127,-42,12,56,16,-30,-51, 
  /* [5][0][][] */ 77,-37,76,53,-127,52,-72,-108, 
  /* [6][0][][] */ 34,-127,-79,-29,-12,79,-44,-87, 
  /* [7][0][][] */ -35,-96,-82,-63,90,-127,-8,41, 
  /* [8][0][][] */ 45,52,48,63,33,-54,-2,127, 
  /* [9][0][][] */ -20,-52,-46,14,44,-9,127,-18, 
  /* [10][0][][] */ -44,18,-127,28,12,33,108,-114, 
  /* [11][0][][] */ -2,-42,-38,2,-127,13,6,55, 
  /* [12][0][][] */ 96,59,-37,42,-78,127,88,-9, 
  /* [13][0][][] */ -47,1,15,-24,49,-127,-8,75, 
  /* [14][0][][] */ -93,-42,8,44,13,60,-123,-127, 
  /* [15][0][][] */ 53,88,48,-3,-127,54,112,-50, 
  /* [16][0][][] */ -6,-55,12,60,-14,-65,2,-127, 
  /* [17][0][][] */ -72,127,29,-3,-60,-42,-79,-85, 
  /* [18][0][][] */ 110,127,-84,-104,104,91,-88,-95, 
  /* [19][0][][] */ -22,72,-8,21,-127,-1,-60,-108, 
  /* [20][0][][] */ -127,-10,4,8,19,19,106,42, 
  /* [21][0][][] */ -32,-4,43,26,-83,-117,-127,41, 
  /* [22][0][][] */ -9,-33,-52,-10,-127,1,14,61, 
  /* [23][0][][] */ 65,7,-26,-3,127,64,-74,74, 
  /* [24][0][][] */ 127,14,-53,40,-79,1,18,-9, 
  /* [25][0][][] */ 41,-64,47,90,-34,-127,15,114, 
  /* [26][0][][] */ 18,127,5,55,83,-22,24,-15, 
  /* [27][0][][] */ -127,101,52,-9,114,-59,-5,101, 
  /* [28][0][][] */ -81,-78,-68,-28,84,-127,17,-11, 
  /* [29][0][][] */ -62,-9,30,38,127,-76,-71,71, 
  /* [30][0][][] */ 127,58,-127,-104,-65,-88,-75,-68, 
  /* [31][0][][] */ 20,-3,41,60,-127,5,36,10, 
  /* [32][0][][] */ 127,12,54,36,-38,-72,89,69, 
  /* [33][0][][] */ 116,26,-35,20,-127,-60,21,47, 
  /* [34][0][][] */ 32,-3,-29,25,-39,127,10,-58, 
  /* [35][0][][] */ 125,52,-29,-45,49,-99,39,127, 
  /* [36][0][][] */ -32,-35,60,-97,-22,-21,68,-127, 
  /* [37][0][][] */ 73,-61,55,40,120,-11,37,-127, 
  /* [38][0][][] */ 66,127,3,-22,-29,26,25,88, 
  /* [39][0][][] */ 44,10,-72,95,-23,-82,-98,127, 
  /* [40][0][][] */ -14,-35,4,-38,23,-127,15,37, 
  /* [41][0][][] */ -35,57,-125,-56,87,127,51,-103, 
  /* [42][0][][] */ 37,-46,-52,23,90,127,29,58, 
  /* [43][0][][] */ 6,61,-22,32,-127,-77,65,-71, 
  /* [44][0][][] */ -127,-46,-18,-27,56,48,-104,-65, 
  /* [45][0][][] */ -70,59,-69,27,38,-6,-64,127, 
  /* [46][0][][] */ -39,48,127,-11,-47,-54,-59,52, 
  /* [47][0][][] */ -127,-102,-47,-43,86,114,-45,101, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0033755251206457615, 0.0013077544281259179, 0.0020947027951478958, 0.0028602264355868101, 0.0045589166693389416, 0.00096147687872871757, 0.0027991042006760836, 0.002316988306120038, 0.00087638403056189418, 0.003210822120308876, 0.0016333755338564515, 0.0028998695779591799, 0.0017843336099758744, 0.0026841510552912951, 0.003634720342233777, 0.0020750763360410929, 0.0024141301400959492, 0.0013114392058923841, 0.0015537305735051632, 0.0027128886431455612, 0.0036567714996635914, 0.0024224279914051294, 0.0033499416895210743, 0.00243022246286273, 0.0037797624245285988, 0.0017163455486297607, 0.0028571051079779863, 0.0023374396841973066, 0.0027502994053065777, 0.0017767666140571237, 0.0012448198394849896, 0.0021500543225556612, 0.0033040367998182774, 0.0034782371949404478, 0.0027358783408999443, 0.0023630945943295956, 0.0025196480564773083, 0.00094232871197164059, 0.0032787309028208256, 0.002536493819206953, 0.0011947040911763906, 0.0011530633782967925, 0.0028841232415288687, 0.0022756236139684916, 0.0031025370117276907, 0.0022721684072166681, 0.00060770899290218949, 0.0017559085972607136, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { -1553, 7292, 3588, -824, 226, 9748, 3036, 1677, 12605, 1893, -3287, 2093, 4193, 1924, -317, 1205, -1814, 7382, -2988, -1328, 1071, 1425, 325, -617, 192, 3669, -1696, -1476, -986, -2874, 9340, 3698, 684, 944, 469, 1714, 1486, 10864, 1478, 558, 9148, -2846, 943, 2236, -1844, -2122, 19554, 2993, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00031772846705280244, 0.00012309516023378819, 0.00019716833776328713, 0.0002692248672246933, 0.00042911770287901163, 9.0501045633573085e-05, 0.00026347162202000618, 0.00021809143072459847, 8.2491504144854844e-05, 0.00030222543864510953, 0.00015374492795672268, 0.0002729563566390425, 0.00016795417468529195, 0.00025265139993280172, 0.000342125742463395, 0.00019532095757313073, 0.00022723511210642755, 0.00012344199058134109, 0.00014624818868469447, 0.00025535639724694192, 0.00034420136944390833, 0.00022801617160439491, 0.00031532035791315138, 0.00022874983551446348, 0.00035577814560383558, 0.00016155466437339783, 0.00026893106405623257, 0.00022001645993441343, 0.00025887775700539351, 0.0001672419166425243, 0.00011717130109900609, 0.00020237841818016022, 0.00031099945772439241, 0.00032739643938839436, 0.00025752035435289145, 0.0002224312920589, 0.00023716721625532955, 8.8698689069133252e-05, 0.0003086174838244915, 0.00023875285114627331, 0.00011245405039517209, 0.00010853453568415716, 0.00027147421496920288, 0.00021419789118226618, 0.000292032869765535, 0.0002138726704288274, 5.7201898016501218e-05, 0.00016527861589565873, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ 60,-44,-44,52,79,39,-64,-74,6,32,114,-93,-29,95,105,31,72,-88,70,101,-78,-63,58,116,-60,-26,74,115,96,127,-41,68,66,-49,-104,-65,114,-65,68,22,-106,48,65,-57,95,127,48,-112, 93,-65,-68,80,75,40,-79,-59,20,42,107,-127,-76,93,112,59,57,-107,53,109,-87,-125,82,127,-76,-66,127,85,127,93,-44,108,87,-76,-127,-71,125,-80,68,55,-127,75,76,-45,127,113,55,-98, 21,-49,-52,48,15,-5,0,-35,9,2,-16,-62,-36,54,27,27,12,-7,32,12,-24,-121,26,46,-53,-29,41,31,33,74,-26,27,39,-77,-44,-35,52,-35,-2,40,-51,-2,7,-14,60,51,6,-30, 
  /* [0][1][][] */ 30,-112,-60,83,99,98,-91,-127,84,96,110,-63,-114,123,127,108,106,-95,38,87,-103,-115,81,103,-75,-85,87,122,102,123,-86,91,103,-103,-60,-113,79,-96,95,59,-92,83,127,-127,86,94,17,-122, 28,-127,-127,127,127,127,-127,-117,127,127,127,-105,-127,127,100,127,127,-127,39,127,-127,-127,127,104,-127,-127,125,127,101,46,-127,127,127,-127,-90,-127,127,-127,127,127,-115,120,125,-86,125,109,30,-127, -21,-98,-60,59,53,35,-47,-34,57,22,-8,-57,-66,69,29,74,47,-16,47,23,-22,-68,82,32,-57,2,9,73,40,-5,-45,40,69,-83,-52,-36,58,-33,8,55,-35,8,41,-63,19,-20,10,-81, 
  /* [0][2][][] */ -46,-70,-40,32,10,65,-40,-28,-100,52,47,-58,-84,30,37,60,75,-32,-69,31,-16,-36,54,55,-26,-45,30,103,45,9,-53,28,54,-52,3,-80,18,-36,51,100,-40,100,56,-88,18,33,-105,-40, -127,-104,-63,71,21,74,-51,-1,-77,69,17,-75,-127,41,35,75,78,-47,-127,41,-39,-87,85,54,-83,-24,32,60,30,-53,-76,54,71,-86,4,-80,29,-45,58,119,-29,127,78,-96,31,-23,-127,-77, -74,-44,-32,44,2,23,8,12,-92,16,1,-34,-57,21,23,57,24,7,-58,15,-32,6,49,19,-52,19,-12,18,29,-37,-29,22,42,-62,9,-16,28,0,-12,77,-11,30,42,-33,-4,5,-61,-54, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0091410763561725616, 0.0037349746562540531, 0.0044316835701465607, 0.003563757985830307, 0.0029698347207158804, 0.0055659241043031216, 0.004853010643273592, 0.0042264382354915142, 0.0095993010327219963, 0.0030420173425227404, 0.005385697353631258, 0.0034026606008410454, 0.0037265962455421686, 0.008221060037612915, 0.003541616490110755, 0.0030828022863715887, 0.0033366486895829439, 0.0052631502039730549, 0.019786002114415169, 0.0035362567286938429, 0.0017935934010893106, 0.0035111145116388798, 0.0025345985777676105, 0.0063739954493939877, 0.00498597277328372, 0.005715216975659132, 0.007863231934607029, 0.0054657114669680595, 0.0052739670500159264, 0.009976251982152462, 0.0054646460339426994, 0.0036488131154328585, 0.0031266347505152225, 0.0053831771947443485, 0.0048324526287615299, 0.0043512368574738503, 0.003750302130356431, 0.003961650189012289, 0.0045756646431982517, 0.0034735819790512323, 0.0053477366454899311, 0.0069024674594402313, 0.0031305018346756697, 0.0045256204903125763, 0.0059263687580823898, 0.005632414948195219, 0.0089686084538698196, 0.0045887897722423077, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { -493, 31592, 22198, -1180, -1015, -14138, 16118, 14448, -11388, 570, -1242, 18257, 21262, -17531, -9148, -1313, -284, 28156, -646, 369, 54529, 10636, -9951, -6046, 13801, 12176, -2393, -669, -4070, -176, 27290, -1571, -7844, 10547, 10034, 15776, -4887, 40152, -2971, 265, 29352, 779, -3524, 14344, 473, -1230, -3409, 14497, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.00021508416102733463, 8.7881759100127965e-05, 0.00010427490633446723, 8.3853134128730744e-05, 6.9878464273642749e-05, 0.00013096292968839407, 0.00011418848589528352, 9.944560588337481e-05, 0.00022586590785067528, 7.1576876507606357e-05, 0.00012672229786403477, 8.0062600318342447e-05, 8.7684617028571665e-05, 0.00019343671738170087, 8.3332153735682368e-05, 7.2536524385213852e-05, 7.8509379818569869e-05, 0.00012383883586153388, 0.00046555299195460975, 8.3206039562355727e-05, 4.2202198528684676e-05, 8.2614460552576929e-05, 5.9637615777319297e-05, 0.0001499763602623716, 0.00011731700942618772, 0.00013447568926494569, 0.0001850172266131267, 0.00012860498100053519, 0.00012409334885887802, 0.00023473534383811057, 0.00012857990805059671, 8.5854429926257581e-05, 7.3567876825109124e-05, 0.00012666299880947918, 0.00011370477295713499, 0.00010238204413326457, 8.8242406491190195e-05, 9.3215297965798527e-05, 0.00010766270133899525, 8.1731341197155416e-05, 0.00012582910130731761, 0.00016241100092884153, 7.3658869951032102e-05, 0.00010648518946254626, 0.00013944397505838424, 0.00013252740609459579, 0.00021102608297951519, 0.00010797152935992926, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[8*1*1*48] = { 
  /* [0][0][][] */ -23,-34,47,-46,57,85,61,87,106,-41,-22,61,-27,-19,16,-20,44,38,11,-52,-28,25,-83,-45,30,-6,13,-82,-25,19,37,23,24,51,63,15,123,-62,-84,1,-61,-60,-34,-6,-68,-96,-127,66, 
  /* [1][0][][] */ -7,0,-42,49,1,8,-37,-18,-67,30,11,96,-37,0,-27,127,35,56,8,-35,-46,-15,-65,22,19,-1,-10,-87,54,-17,-62,-71,60,-25,-35,-58,29,38,56,-45,5,76,58,-39,5,-32,-61,-19, 
  /* [2][0][][] */ 15,-69,-22,4,-23,24,3,17,100,18,0,-21,-35,-78,40,15,8,-51,-16,3,-95,50,3,31,-3,41,-35,-29,-25,-34,44,-37,-85,17,-57,58,-58,53,-13,-25,127,-15,3,37,36,43,-57,-31, 
  /* [3][0][][] */ -31,-115,91,62,25,-95,-21,-2,-127,121,59,-52,45,8,-16,25,57,31,-25,48,75,85,32,-66,10,86,59,25,-34,-74,10,16,-22,7,43,16,-11,-88,-44,37,-25,-5,26,-76,-73,12,-7,31, 
  /* [4][0][][] */ -10,64,-12,71,28,12,10,8,-52,75,56,68,1,7,73,19,6,-108,-4,-8,98,-14,-108,67,73,-19,33,24,43,33,-6,-56,-55,127,6,16,59,-31,28,20,-19,45,-8,-21,-3,-59,-28,25, 
  /* [5][0][][] */ -21,11,-12,-69,-124,26,105,26,9,52,-43,-25,-108,-8,58,-44,-94,42,-58,-85,6,100,6,33,103,24,-8,8,-26,-7,127,-60,-14,105,77,87,-32,59,89,45,-24,-37,-19,42,-56,47,26,48, 
  /* [6][0][][] */ 0,-26,-16,22,-49,-47,11,8,17,-12,34,0,-55,-29,29,57,2,-53,1,-58,62,-25,2,-30,3,-7,3,33,36,5,15,127,46,-21,-18,26,0,-4,20,17,3,36,-22,-50,0,-21,-26,31, 
  /* [7][0][][] */ -22,-19,-48,0,9,-22,2,11,39,6,28,-4,-8,14,7,3,35,-8,4,0,-63,5,13,-29,-2,-10,-49,-11,-12,-19,19,34,21,-12,28,14,-17,127,-15,-37,-40,0,-44,-36,27,63,-72,-12, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant24_scale = { 8, { 0.0033606914803385735, 0.0053446376696228981, 0.0040900222957134247, 0.0046234661713242531, 0.0063069374300539494, 0.0056429905816912651, 0.0068663316778838634, 0.0077618667855858803, } };
const TfArray<8, int> quant24_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[8] = { 7451, -1401, 13627, -7624, -15987, -14982, -8775, -2059, };
const TfArray<1, int> tensor_dimension25 = { 1, { 8 } };
const TfArray<8, float> quant25_scale = { 8, { 6.6941625846084207e-05, 0.00010645986185409129, 8.1469173892401159e-05, 9.2094844148959965e-05, 0.00012562790652737021, 0.0001124027548939921, 0.00013677049719262868, 0.00015460865688510239, } };
const TfArray<8, int> quant25_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[48*1*1*8] = { 
  /* [0][0][][] */ -85,-127,-34,18,-30,-3,41,-37, 
  /* [1][0][][] */ -18,127,35,-80,5,-89,-68,83, 
  /* [2][0][][] */ -127,-55,51,17,65,8,43,-16, 
  /* [3][0][][] */ -9,-44,-127,-68,32,-59,-43,66, 
  /* [4][0][][] */ -69,-125,127,-50,121,-41,61,4, 
  /* [5][0][][] */ -39,55,58,-109,92,48,-60,127, 
  /* [6][0][][] */ -127,81,61,53,-60,11,31,-103, 
  /* [7][0][][] */ 50,0,46,38,49,-127,10,87, 
  /* [8][0][][] */ 3,69,-19,-24,25,99,127,-74, 
  /* [9][0][][] */ 89,127,2,-64,-52,-71,-55,85, 
  /* [10][0][][] */ 20,-17,26,-7,-20,43,-127,-66, 
  /* [11][0][][] */ -79,1,-102,-89,127,35,33,56, 
  /* [12][0][][] */ 94,41,-20,-9,127,106,18,-1, 
  /* [13][0][][] */ -127,-113,-7,64,-111,40,77,15, 
  /* [14][0][][] */ -26,84,-84,101,-57,127,-27,44, 
  /* [15][0][][] */ -4,-91,-47,-73,127,45,-24,55, 
  /* [16][0][][] */ 80,-70,2,49,30,-20,36,-127, 
  /* [17][0][][] */ -89,-83,-127,107,-12,85,93,-80, 
  /* [18][0][][] */ 68,-15,125,-4,-50,-127,-104,-27, 
  /* [19][0][][] */ -37,127,46,19,98,-122,-79,-21, 
  /* [20][0][][] */ -80,-25,-127,-53,32,1,-12,-3, 
  /* [21][0][][] */ -94,2,26,80,-65,-121,127,-63, 
  /* [22][0][][] */ 44,-15,-127,-66,-39,-16,-13,60, 
  /* [23][0][][] */ -13,26,127,-5,-85,26,5,-86, 
  /* [24][0][][] */ -57,88,55,109,127,69,-22,-31, 
  /* [25][0][][] */ -54,-127,-56,41,-57,51,45,11, 
  /* [26][0][][] */ 102,90,-127,-50,-91,-29,-73,20, 
  /* [27][0][][] */ 43,39,-69,9,-127,29,-41,-10, 
  /* [28][0][][] */ -7,70,30,-52,90,89,-102,-127, 
  /* [29][0][][] */ 26,-8,0,-90,-127,22,7,-54, 
  /* [30][0][][] */ -105,-15,51,127,63,35,-50,-23, 
  /* [31][0][][] */ -1,-127,-5,-87,-125,53,-61,-100, 
  /* [32][0][][] */ -127,-1,32,-8,5,-27,-2,33, 
  /* [33][0][][] */ 71,-89,-127,-110,8,23,-47,11, 
  /* [34][0][][] */ 65,79,127,3,-112,-56,83,-73, 
  /* [35][0][][] */ 100,19,7,4,-96,-34,-127,-53, 
  /* [36][0][][] */ 127,21,91,-63,1,-35,72,100, 
  /* [37][0][][] */ 105,98,1,-19,68,88,-127,46, 
  /* [38][0][][] */ -44,78,119,127,-9,94,11,-97, 
  /* [39][0][][] */ 42,59,127,-26,78,-61,-25,4, 
  /* [40][0][][] */ 72,21,19,-8,-60,-127,18,-48, 
  /* [41][0][][] */ 39,-55,24,127,-32,84,-1,84, 
  /* [42][0][][] */ -18,-123,73,-42,127,-33,100,29, 
  /* [43][0][][] */ -12,-39,-84,-31,127,58,-81,104, 
  /* [44][0][][] */ 85,-27,127,-9,9,40,-67,12, 
  /* [45][0][][] */ -49,14,39,-39,-97,-120,-31,127, 
  /* [46][0][][] */ -75,88,97,30,-19,-21,42,-127, 
  /* [47][0][][] */ 46,-8,10,119,-27,-127,68,76, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant26_scale = { 48, { 0.0050800824537873268, 0.0034092627465724945, 0.002272025914862752, 0.0029102573171257973, 0.0027183648198843002, 0.0023228584323078394, 0.0038965004496276379, 0.0016248438041657209, 0.0016637122025713325, 0.0032007121481001377, 0.0031302243005484343, 0.0033154489938169718, 0.0038584431167691946, 0.0023959064856171608, 0.0039105904288589954, 0.003099522553384304, 0.0043476936407387257, 0.0032392395660281181, 0.0013225754955783486, 0.0029689620714634657, 0.003706661518663168, 0.0016176886856555939, 0.003748033894225955, 0.0030615804716944695, 0.0015317080542445183, 0.0020426751580089331, 0.0033195517025887966, 0.0021060251165181398, 0.0019832057878375053, 0.003782154293730855, 0.0050308238714933395, 0.0018923066090792418, 0.0043969200924038887, 0.0017699494492262602, 0.0018775888020172715, 0.002577867591753602, 0.00013267404574435204, 0.0017101085977628827, 0.0023902594111859798, 0.0010605665156617761, 0.0033209810499101877, 0.0041577448137104511, 0.0025999811477959156, 0.0030933476518839598, 0.0055639874190092087, 0.0029183339793235064, 0.0034504865761846304, 0.0018249857239425182, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[48] = { 867, 4765, -7301, 4801, 3804, 5979, 2355, 10934, 12650, 4912, -2381, -102, 1062, 5188, 2694, -478, 119, 4552, 16498, 406, 2436, 10850, 3038, 5210, 12445, 8925, 1480, 9187, 2459, 4225, -1836, 9351, 2249, 9754, 8245, 6165, 263340, 10817, 5791, 20941, 2111, 942, 5560, 1519, 2579, 1906, 2398, 4731, };
const TfArray<1, int> tensor_dimension27 = { 1, { 48 } };
const TfArray<48, float> quant27_scale = { 48, { 0.00023554358631372452, 0.00015807419549673796, 0.00010534497414482757, 0.00013493727601598948, 0.00012603995855897665, 0.00010770187509479001, 0.00018066550546791404, 7.5337666203267872e-05, 7.7139840868767351e-05, 0.00014840452058706433, 0.00014513627684209496, 0.00015372442430816591, 0.00017890094022732228, 0.00011108882608823478, 0.00018131881370209157, 0.00014371276483871043, 0.00020158557163085788, 0.00015019088459666818, 6.1322658439166844e-05, 0.00013765918265562505, 0.00017186341574415565, 7.5005911639891565e-05, 0.00017378169286530465, 0.00014195352559909225, 7.1019319875631481e-05, 9.471087105339393e-05, 0.00015391464694403112, 9.7648160590324551e-05, 9.1953508672304451e-05, 0.00017536373343318701, 0.00023325966321863234, 8.7738866568543017e-05, 0.00020386801043059677, 8.2065642345696688e-05, 8.7056461779866368e-05, 0.00011952565546380356, 6.1515775087173097e-06, 7.9291057772934437e-05, 0.00011082699347753078, 4.917432670481503e-05, 0.00015398093091789633, 0.00019277838873676956, 0.00012055097613483667, 0.00014342645590659231, 0.00025798036949709058, 0.00013531175500247627, 0.00015998558956198394, 8.4617458924185485e-05, } };
const TfArray<48, int> quant27_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*48] = { 
  /* [0][0][][] */ -52,-2,47,0,127,-33,8,8,33,35,22,-11,25,33,-46,22,70,-76,-15,105,-23,17,-70,-6,-8,9,39,-37,-20,127,15,-112,-71,105,117,-69,15,-48,-127,-31,27,-45,-5,-71,4,-34,-127,10, -56,96,14,23,-27,-85,87,-18,77,18,29,127,84,127,5,28,127,-101,-8,121,-21,-8,83,-127,14,61,-90,34,-38,-85,97,-124,-127,-95,26,-20,-62,-32,-107,13,-36,-48,23,-127,21,-127,20,49, -41,0,3,-11,33,-58,6,-4,61,28,-55,-20,-22,15,-63,44,50,-52,-8,82,-34,4,-76,12,38,10,33,-104,-28,43,-68,-127,-19,-11,114,-32,18,-34,-91,2,32,-20,11,-43,-16,-43,-110,-11, 
  /* [0][1][][] */ -127,107,-25,-58,3,-80,0,-4,58,24,55,31,57,74,-107,15,98,-127,13,127,-38,-50,-125,-15,-127,-11,-23,19,-5,-2,62,-46,-25,127,-118,-48,34,-74,40,56,-75,20,-73,63,-16,-79,26,-57, 8,127,127,127,-48,70,-127,127,127,-127,-47,50,127,68,127,-97,-64,-103,127,22,-127,127,106,14,120,127,68,127,127,-75,127,33,-20,-117,-13,-127,127,127,108,52,-36,127,-19,89,127,59,-18,-127, -72,41,-53,-45,-71,-119,2,-22,15,10,54,48,18,53,-81,93,103,-123,-4,97,16,-66,-127,-22,42,-31,-26,5,3,16,89,-86,-13,-46,-127,-58,28,-97,57,-127,-47,32,127,82,-40,-105,9,119, 
  /* [0][2][][] */ -21,-25,7,-1,23,-21,36,4,62,33,127,21,9,-27,-69,127,84,-69,-69,-17,-16,2,-45,61,-7,-4,-20,-27,11,52,-5,-29,-24,41,-67,52,-52,-67,37,-30,89,-3,6,-12,-33,26,4,-45, -59,112,22,25,-102,-127,78,-68,65,27,82,-58,-22,1,-98,115,62,-3,-21,110,-37,17,97,114,19,-127,127,-6,18,-42,-52,-112,-14,-68,-63,-90,-81,-88,38,41,127,71,-49,29,-36,-69,-113,-15, 51,-15,22,4,-29,-19,27,12,65,29,71,27,7,-26,-57,80,60,-18,-69,-12,-40,-2,-71,54,26,-8,-12,-68,7,1,-13,-31,-26,-12,-21,57,-45,-55,46,10,57,-21,40,-8,-36,-29,2,26, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0052471235394477844, 0.0038001849316060543, 0.040634047240018845, 0.014140496030449867, 0.0083748148754239082, 0.008486446924507618, 0.0066907973960042, 0.017844343557953835, 0.0049646836705505848, 0.019483920186758041, 0.0083243018016219139, 0.0087428959086537361, 0.0083597712218761444, 0.0050435098819434643, 0.0050476626493036747, 0.0035348806995898485, 0.0045973891392350197, 0.0029327159281820059, 0.016321092844009399, 0.0024427352473139763, 0.0057189376093447208, 0.019592428579926491, 0.0067392890341579914, 0.0074183139950037003, 0.010466214269399643, 0.010079341009259224, 0.010474192909896374, 0.011545284651219845, 0.011304518207907677, 0.0074424776248633862, 0.0060908817686140537, 0.0047357757575809956, 0.0063851051963865757, 0.0075678755529224873, 0.0057074287906289101, 0.005879460833966732, 0.018015880137681961, 0.0051683341152966022, 0.0053630592301487923, 0.014452673494815826, 0.0072284163907170296, 0.0064604813233017921, 0.0088068712502717972, 0.0058580054901540279, 0.0069551034830510616, 0.003280997509136796, 0.0067510367371141911, 0.0080737313255667686, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[48] = { 14649, -17372, -1470, 1947, 2927, 10690, 5383, -1969, -15214, 689, -3211, -2524, -7322, -10475, 8756, 2050, -11818, 39234, -1765, -17701, 15238, -3149, 1879, -1521, -5264, -1914, -5666, -1350, -1427, 1495, 194, 27288, 16687, 541, 3785, 16502, -170, 22000, -482, 519, -5843, -7536, -2985, 1722, 7728, 26787, 13596, -4048, };
const TfArray<1, int> tensor_dimension29 = { 1, { 48 } };
const TfArray<48, float> quant29_scale = { 48, { 8.7202708527911454e-05, 6.3155828684102744e-05, 0.00067530316300690174, 0.00023500296811107546, 0.00013918227341491729, 0.00014103749708738178, 0.00011119533883174881, 0.00029655775870196521, 8.2508799096103758e-05, 0.00032380610355176032, 0.00013834278797730803, 0.00014529946201946586, 0.00013893225695937872, 8.3818827988579869e-05, 8.3887840446550399e-05, 5.8746696595335379e-05, 7.6404678111430258e-05, 4.8739235353423283e-05, 0.00027124263579025865, 4.0596172766527161e-05, 9.5043855253607035e-05, 0.00032560943509452045, 0.00011200122389709577, 0.00012328603770583868, 0.00017393953748978674, 0.00016751003568060696, 0.00017407213454134762, 0.00019187276484444737, 0.00018787143926601857, 0.00012368762691039592, 0.00010122525418410078, 7.8704550105612725e-05, 0.00010611499601509422, 0.00012577162124216557, 9.4852592155802995e-05, 9.7711614216677845e-05, 0.00029940853710286319, 8.5893298091832548e-05, 8.9129462139680982e-05, 0.00024019108968786895, 0.00012013010564260185, 0.00010736768308561295, 0.00014636268315371126, 9.7355048637837172e-05, 0.00011558787809917703, 5.4527376050828025e-05, 0.00011219646694371477, 0.00013417852460406721, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[8*1*1*48] = { 
  /* [0][0][][] */ 38,49,-80,54,8,29,-80,-32,6,-17,-5,-35,-9,1,35,-2,54,-21,38,-14,9,-41,41,-6,4,-20,-19,9,-18,6,-11,4,47,13,17,9,127,51,22,-31,3,-25,-10,-22,78,29,12,-51, 
  /* [1][0][][] */ 59,30,19,3,33,101,-2,-36,43,75,-44,-82,124,-9,9,40,36,30,17,-78,127,-37,46,45,34,35,45,7,22,-59,70,78,62,97,2,117,59,20,11,18,96,22,39,24,37,50,100,-79, 
  /* [2][0][][] */ -37,14,88,127,-42,15,-6,73,26,54,9,-71,-45,117,33,48,-90,-83,83,-1,-8,74,-47,-75,-26,-43,28,6,-102,9,-7,3,-46,-25,-86,-29,18,37,-90,-5,-27,-57,-36,32,56,-84,-27,14, 
  /* [3][0][][] */ -32,48,-58,-1,23,-71,10,67,111,-66,-43,23,5,-20,2,52,31,-3,-24,-16,-15,17,-71,38,-32,-38,34,-20,54,-19,39,-62,37,-15,-38,-50,-127,-12,-68,9,-25,-56,29,-14,-58,7,-12,-34, 
  /* [4][0][][] */ 53,-29,34,-38,-71,68,14,85,-125,-60,59,57,78,-70,-62,-57,83,68,80,-44,11,-84,-27,62,-25,-8,-57,-116,-52,-71,91,42,91,14,127,96,80,79,71,51,0,30,-59,-26,82,78,111,-56, 
  /* [5][0][][] */ 43,87,11,94,19,34,-44,-92,-102,30,-6,-1,22,58,40,-72,81,112,-14,46,-15,-55,-8,-65,-102,-66,-27,65,-5,43,-35,44,-4,-72,69,0,-37,127,-53,-105,4,-47,-9,-36,5,-19,-48,97, 
  /* [6][0][][] */ 112,59,9,127,-78,28,12,60,12,-102,67,83,69,-30,-14,-48,50,38,-60,17,80,-29,-16,8,17,71,-29,-31,23,-49,52,59,5,-50,5,100,101,-68,6,22,-77,72,-88,58,67,108,109,-43, 
  /* [7][0][][] */ 10,24,127,44,-43,68,-84,23,-45,107,-11,-15,46,72,9,1,-53,-3,-62,10,-22,41,3,-50,-8,57,60,-26,-3,4,19,-9,-109,-18,68,29,93,-9,30,-17,-16,-42,-30,-47,-4,-37,3,35, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant30_scale = { 8, { 0.0063517466187477112, 0.0026998154353350401, 0.0024481641594320536, 0.0027337663341313601, 0.0022507719695568085, 0.0033205924555659294, 0.0023592317011207342, 0.0043858811259269714, } };
const TfArray<8, int> quant30_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[8] = { -12851, -39896, 2011, 8481, -21233, -889, -31201, -92, };
const TfArray<1, int> tensor_dimension31 = { 1, { 8 } };
const TfArray<8, float> quant31_scale = { 8, { 0.00013386581849772483, 5.6899785704445094e-05, 5.1596125558717176e-05, 5.7615314290160313e-05, 4.7435998567380011e-05, 6.9982932473067194e-05, 4.9721835239324719e-05, 9.2434354883152992e-05, } };
const TfArray<8, int> quant31_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[48*1*1*8] = { 
  /* [0][0][][] */ -127,62,-12,-23,65,55,8,-43, 
  /* [1][0][][] */ -15,-67,-26,-15,-60,-127,17,13, 
  /* [2][0][][] */ -54,74,6,-44,-39,51,-61,127, 
  /* [3][0][][] */ 43,28,43,-8,-50,-127,50,-20, 
  /* [4][0][][] */ 3,57,-110,25,-127,106,30,39, 
  /* [5][0][][] */ -36,48,31,-22,-78,-127,-53,-17, 
  /* [6][0][][] */ -67,127,110,-44,-70,-19,4,-21, 
  /* [7][0][][] */ -7,-9,44,53,-6,-127,-12,63, 
  /* [8][0][][] */ 127,13,-89,105,-85,-86,-115,-23, 
  /* [9][0][][] */ 116,-36,-76,-73,4,-38,-60,127, 
  /* [10][0][][] */ -84,5,1,127,14,80,30,-87, 
  /* [11][0][][] */ 15,25,64,-17,2,106,127,98, 
  /* [12][0][][] */ -103,-109,-54,-99,127,-60,3,65, 
  /* [13][0][][] */ -46,13,1,39,16,-127,69,97, 
  /* [14][0][][] */ 52,55,85,41,48,-127,-71,-41, 
  /* [15][0][][] */ -39,77,127,47,-26,35,31,-58, 
  /* [16][0][][] */ -113,-40,50,-83,127,25,-44,19, 
  /* [17][0][][] */ 50,-59,-60,-9,-7,127,-36,43, 
  /* [18][0][][] */ -12,127,63,-63,-48,63,85,-72, 
  /* [19][0][][] */ 28,113,101,127,-40,13,40,20, 
  /* [20][0][][] */ 19,1,45,-127,-40,11,49,-18, 
  /* [21][0][][] */ -85,67,44,-127,106,66,103,14, 
  /* [22][0][][] */ 71,-31,-116,74,74,-38,-69,127, 
  /* [23][0][][] */ 35,-75,-127,-30,85,-20,-72,112, 
  /* [24][0][][] */ 24,-4,-73,3,-64,48,-108,127, 
  /* [25][0][][] */ -13,-25,53,4,127,-9,-78,-36, 
  /* [26][0][][] */ 11,84,127,-32,-37,-35,57,-64, 
  /* [27][0][][] */ -46,38,120,-66,16,30,71,-127, 
  /* [28][0][][] */ 56,-13,77,127,86,-24,34,96, 
  /* [29][0][][] */ 64,87,112,33,-77,24,-127,110, 
  /* [30][0][][] */ 45,7,-74,46,-127,-25,-46,68, 
  /* [31][0][][] */ 4,112,120,-80,-65,47,109,-127, 
  /* [32][0][][] */ 70,3,-1,47,114,127,34,-45, 
  /* [33][0][][] */ 9,-35,-127,15,10,-25,-37,67, 
  /* [34][0][][] */ 11,-43,40,-127,-17,96,-25,4, 
  /* [35][0][][] */ -16,26,83,4,11,-127,4,-20, 
  /* [36][0][][] */ -15,18,-26,-127,-9,12,7,-39, 
  /* [37][0][][] */ 74,4,-16,-97,-84,127,-72,-72, 
  /* [38][0][][] */ 77,-49,-13,79,52,32,-31,127, 
  /* [39][0][][] */ 127,88,41,62,-18,78,-46,0, 
  /* [40][0][][] */ 28,-110,-127,-14,17,-4,-49,71, 
  /* [41][0][][] */ -12,-47,-127,-99,-7,-74,-32,-8, 
  /* [42][0][][] */ 57,109,78,127,-60,-44,20,35, 
  /* [43][0][][] */ 118,-54,-74,-127,-58,-26,20,68, 
  /* [44][0][][] */ 5,95,105,-79,-68,9,63,-127, 
  /* [45][0][][] */ 41,12,-127,48,-50,33,29,92, 
  /* [46][0][][] */ 51,-27,-59,-127,10,-23,-39,46, 
  /* [47][0][][] */ 78,-109,127,-70,72,-38,1,19, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant32_scale = { 48, { 0.0004742501478176564, 0.0018467869376763701, 0.0028787993360310793, 0.003255386371165514, 0.002197355730459094, 0.0032540184911340475, 0.0018127881921827793, 0.0023869702126830816, 0.0015350149478763342, 0.0017633312381803989, 0.0012274293694645166, 0.0023638173006474972, 0.0014750224072486162, 0.0026207598857581615, 0.002089367713779211, 0.0027340373490005732, 0.0017357958713546395, 0.0027226968668401241, 0.0012167601380497217, 0.0025342986918985844, 0.0031012315303087234, 0.0016932947328314185, 0.0023346766829490662, 0.0016325567848980427, 0.002899764571338892, 0.0026586081366986036, 0.0031836710404604673, 0.00095255265478044748, 0.0034960578195750713, 0.0017126587918028235, 0.0026414867024868727, 0.0014324878575280309, 0.0029476971831172705, 0.0026474816258996725, 0.0026923180557787418, 0.0032464563846588135, 0.0031431869138032198, 0.0022091390565037727, 0.0037060801405459642, 0.0039767492562532425, 0.0012685770634561777, 0.0036278462503105402, 0.0010454932926222682, 0.0021138321608304977, 0.0031050867401063442, 0.0022902525961399078, 0.0023984406143426895, 0.0029397555626928806, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[48] = { 32672, 6614, 1541, 1049, 4629, 1936, 5951, 3845, 4470, -5928, 12390, 1544, 7786, 1815, 4828, 1934, 5916, -1034, 11526, 99, 2797, -1134, 3642, 6899, 1781, -3325, 1965, 15157, 754, 6908, 1422, 9353, 214, 4396, -54, -1601, 2444, 2382, 31, 779, 10618, -559, 12480, 2927, 1206, 5180, 3575, -1392, };
const TfArray<1, int> tensor_dimension33 = { 1, { 48 } };
const TfArray<48, float> quant33_scale = { 48, { 3.2315048883901909e-05, 0.00012583867646753788, 0.0001961592206498608, 0.00022181957319844514, 0.00014972616918385029, 0.00022172636818140745, 0.00012352202611509711, 0.00016264634905382991, 0.00010459476470714435, 0.00012015206448268145, 8.3636114140972495e-05, 0.00016106873226817697, 0.00010050691344076768, 0.00017857660714071244, 0.0001423679495928809, 0.00018629524856805801, 0.0001182758278446272, 0.00018552251276560128, 8.290912228403613e-05, 0.00017268520605284721, 0.00021131557878106833, 0.00011537982936715707, 0.00015908310888335109, 0.0001112411919166334, 0.00019758778216782957, 0.00018115555576514453, 0.00021693295275326818, 6.4906220359262079e-05, 0.00023821875220164657, 0.00011669928062474355, 0.00017998891416937113, 9.7608644864521921e-05, 0.00020085387222934514, 0.00018039740098174661, 0.00018345253192819655, 0.00022121109941508621, 0.00021417438983917236, 0.00015052907110657543, 0.00025252951309084892, 0.00027097269776277244, 8.643988985568285e-05, 0.00024719870998524129, 7.1239126555155963e-05, 0.00014403492968995124, 0.0002115782699547708, 0.00015605609223712236, 0.00016342793242074549, 0.00020031273015774786, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*48] = { 
  /* [0][0][][] */ 90,71,-10,37,5,-14,-37,18,31,-51,36,28,15,-127,-28,25,109,40,-86,-8,91,19,-8,-17,87,27,18,3,-98,35,-19,-50,123,7,127,14,-56,5,90,51,-65,98,-113,-58,23,-103,-39,-8, 121,127,-61,69,27,36,-56,-127,47,31,127,55,-12,-52,-11,-18,-55,127,-104,25,65,127,58,-21,36,3,18,127,-127,112,-35,-127,12,-38,22,87,-89,127,84,53,-124,-56,59,-7,0,12,-127,127, 64,46,0,36,11,8,-22,37,36,-64,34,19,0,-99,-24,-39,97,-3,-46,-21,76,46,-30,41,54,88,11,2,-35,33,-30,-30,88,8,110,9,-38,22,111,9,-33,93,38,61,33,81,-13,-16, 
  /* [0][1][][] */ -14,-53,-127,72,27,45,78,-27,40,46,-43,127,127,-34,-24,-92,-21,126,69,-26,-95,30,32,-123,42,66,13,20,-31,127,39,57,75,127,25,24,-98,-7,-56,122,105,11,65,-127,16,-111,-19,127, 67,-112,-66,-127,127,-2,127,-104,-127,127,4,48,-95,96,127,-31,-127,102,2,127,33,-17,127,-2,-127,127,26,-82,-93,67,-127,103,127,-96,6,127,127,97,-40,127,127,-65,-37,-6,101,-36,-11,60, -1,-44,-126,54,-18,127,62,-11,34,37,-37,62,-30,-3,-32,-33,-58,125,127,-54,-127,44,-87,127,18,57,15,42,36,83,56,42,-10,-13,-41,-119,-58,-19,14,40,67,79,-31,108,-3,105,-40,116, 
  /* [0][2][][] */ -28,-43,20,24,-5,24,-5,16,37,-38,7,6,26,-74,-34,30,98,-2,23,0,-50,36,-4,-10,36,-7,-11,-9,-17,-6,64,6,16,4,88,-11,-14,114,92,65,32,81,108,-37,-48,-127,-7,-27, -127,-25,-57,24,-117,1,-72,3,27,89,-72,45,-17,-22,-13,127,-82,44,-89,-32,-61,37,8,-23,-5,79,-127,-37,-61,113,86,10,40,-33,-8,12,-25,105,-52,75,-41,-127,-127,-29,-127,55,-86,119, -22,-44,6,16,15,13,1,15,26,-67,-6,-10,-15,-54,-25,-5,98,-54,118,9,-64,17,-4,34,34,7,-14,-13,10,-14,40,3,12,2,50,21,-6,113,127,10,39,89,-64,30,-29,82,-20,-57, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.0098909931257367134, 0.0074461647309362888, 0.0046673594042658806, 0.0064206821843981743, 0.0099417511373758316, 0.0068573383614420891, 0.010997965931892395, 0.0060556721873581409, 0.010455920360982418, 0.020549923181533813, 0.012339274398982525, 0.0041581182740628719, 0.013292559422552586, 0.0030616032890975475, 0.0076493560336530209, 0.0087555227801203728, 0.004779476672410965, 0.0050803120248019695, 0.0044289659708738327, 0.016219954937696457, 0.0054066423326730728, 0.0088239489123225212, 0.00890306755900383, 0.00894973985850811, 0.006532011553645134, 0.013540833257138729, 0.010578712448477745, 0.015577859245240688, 0.0040244837291538715, 0.0034562349319458008, 0.0077356803230941296, 0.0088089210912585258, 0.0055450587533414364, 0.011458361521363258, 0.0070899645797908306, 0.0068591400049626827, 0.0061853830702602863, 0.0037956347223371267, 0.0034521443303674459, 0.0027523541357368231, 0.010451912879943848, 0.0075283744372427464, 0.01006687805056572, 0.0071076275780797005, 0.0096895862370729446, 0.0040101050399243832, 0.0082349460572004318, 0.0064188875257968903, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[48] = { -5264, 3380, 7666, 2160, -2007, -4802, -3255, 10201, 3153, -2990, -5091, -5873, -503, 16875, 7154, 2122, 8271, -5677, 6776, -881, 11290, -3173, -1633, -616, 1994, -4343, 290, -2487, 9764, -27174, -4704, 235, -2816, -1026, -665, -941, 9186, -6568, 1444, -16063, -6596, 4145, -1016, 154, 1910, 940, 6906, -3911, };
const TfArray<1, int> tensor_dimension35 = { 1, { 48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.00021879388077650219, 0.00016471301205456257, 0.00010324440518161282, 0.00014202880265656859, 0.00021991667745169252, 0.00015168786922004074, 0.00024328069412149489, 0.0001339545997325331, 0.00023129036708269268, 0.00045457491069100797, 0.00027295111794956028, 9.1979723947588354e-05, 0.00029403826920315623, 6.7724249674938619e-05, 0.00016920770576689392, 0.00019367669301573187, 0.000105724495369941, 0.00011237912985961884, 9.7971016657538712e-05, 0.00035879379720427096, 0.00011959772382397205, 0.00019519031047821045, 0.0001969404547708109, 0.00019797286950051785, 0.00014449146692641079, 0.0002995302202180028, 0.00023400658392347395, 0.00034459028393030167, 8.902366244001314e-05, 7.6453703513834625e-05, 0.00017111725173890591, 0.00019485788652673364, 0.00012265956320334226, 0.00025346488109789789, 0.00015683367382735014, 0.00015172772691585124, 0.00013682387361768633, 8.3961400378029794e-05, 7.636321970494464e-05, 6.0883496189489961e-05, 0.00023120171681512147, 0.00016653153579682112, 0.00022268453903961927, 0.00015722439275123179, 0.00021433865185827017, 8.8705593952909112e-05, 0.00018216126773040742, 0.0001419891050318256, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[8*1*1*48] = { 
  /* [0][0][][] */ 127,-24,34,-24,27,61,14,38,126,-93,51,11,-56,59,12,-55,15,-33,-17,-20,18,-54,0,-34,-48,-25,-34,-41,-39,81,-17,31,39,-47,5,-44,63,-77,-49,17,21,-29,-69,-12,64,-43,54,-46, 
  /* [1][0][][] */ 41,-6,-2,69,58,66,24,41,79,-88,-12,8,34,15,-46,-20,-51,-44,-65,-9,11,-44,44,71,-8,-55,2,40,-32,59,-52,127,-17,41,-32,-35,-52,-19,-5,-21,-58,-27,-32,34,24,-16,12,-88, 
  /* [2][0][][] */ -37,-47,-99,30,-104,-37,-4,46,-120,-88,-92,-28,-27,65,-123,10,73,-94,21,-14,127,107,-21,0,63,103,5,-111,-46,-7,81,10,-38,69,80,-57,72,-11,94,93,-37,109,67,1,-93,75,-43,69, 
  /* [3][0][][] */ 6,-22,-1,38,-25,6,-1,52,84,93,-127,-37,14,-28,-31,68,-53,-18,3,39,-28,5,71,8,15,19,-45,62,-42,14,-30,-28,25,17,23,5,47,-10,50,16,-60,75,62,13,34,-29,-37,-33, 
  /* [4][0][][] */ -19,-83,27,-58,-9,87,-65,-65,-8,-44,84,28,-52,-17,-9,35,81,10,-35,46,-86,-16,127,-10,-80,-31,-14,4,26,-36,-1,80,-46,55,-21,67,-28,22,-2,37,-31,50,-42,55,127,66,2,11, 
  /* [5][0][][] */ -69,-72,51,-127,-26,27,-38,-63,-4,70,-55,62,-75,29,56,15,79,48,65,17,20,4,-6,-70,52,-82,10,-40,-6,-39,45,-82,-14,-38,61,2,-28,38,29,61,94,9,13,-19,-6,-8,-38,33, 
  /* [6][0][][] */ -61,-59,29,38,-58,-54,9,-71,-109,18,-120,50,17,-44,60,27,-41,27,11,127,-19,0,72,67,-86,-33,53,16,28,-25,-34,-63,-49,69,76,-84,-43,89,45,-44,-63,57,91,-56,-8,-34,-43,10, 
  /* [7][0][][] */ 27,-9,15,-8,13,31,-42,-52,-127,-29,111,31,2,-33,30,0,19,43,5,-27,-41,15,-17,-49,35,1,-35,20,-16,-19,-30,-61,-104,-58,-40,4,57,-36,-20,-14,60,-2,55,-27,23,-49,35,22, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant36_scale = { 8, { 0.0064582107588648796, 0.0071404189802706242, 0.0031912662088871002, 0.0066670547239482403, 0.0046707191504538059, 0.0045607308857142925, 0.0050743585452437401, 0.0054025412537157536, } };
const TfArray<8, int> quant36_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[8] = { -13208, -3579, 18, -12640, 458, -1431, 13507, 13413, };
const TfArray<1, int> tensor_dimension37 = { 1, { 8 } };
const TfArray<8, float> quant37_scale = { 8, { 0.000126455764984712, 0.00013981382653582841, 6.2486971728503704e-05, 0.00013054505689069629, 9.1455571237020195e-05, 8.93019387149252e-05, 9.9359080195426941e-05, 0.00010578510409686714, } };
const TfArray<8, int> quant37_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[48*1*1*8] = { 
  /* [0][0][][] */ -18,9,127,-25,-7,42,-7,-67, 
  /* [1][0][][] */ 87,-61,69,-77,-22,-76,127,33, 
  /* [2][0][][] */ 62,47,74,-60,-54,30,127,-31, 
  /* [3][0][][] */ -3,23,14,-12,26,-49,127,-5, 
  /* [4][0][][] */ 127,-42,-59,-38,-112,-67,-21,86, 
  /* [5][0][][] */ 28,79,127,0,21,-33,20,-44, 
  /* [6][0][][] */ 109,120,-18,127,-86,39,10,93, 
  /* [7][0][][] */ -14,6,-14,51,45,-111,-127,-52, 
  /* [8][0][][] */ 101,74,-50,81,-58,25,-127,-48, 
  /* [9][0][][] */ 127,-17,-43,35,3,-45,18,-70, 
  /* [10][0][][] */ 82,34,-11,25,-30,127,35,-3, 
  /* [11][0][][] */ 127,-39,-15,-111,108,-55,-37,63, 
  /* [12][0][][] */ -66,104,71,-36,3,54,-72,127, 
  /* [13][0][][] */ 127,16,-86,28,23,-72,33,-118, 
  /* [14][0][][] */ 97,36,5,-13,-127,23,-70,-6, 
  /* [15][0][][] */ 0,29,-69,-13,-127,-29,101,87, 
  /* [16][0][][] */ -10,-28,127,-12,100,-43,-46,-18, 
  /* [17][0][][] */ 26,-13,79,-4,127,-39,-65,-10, 
  /* [18][0][][] */ 124,-45,127,57,-15,51,-54,-21, 
  /* [19][0][][] */ 52,46,72,-71,-44,-127,9,-37, 
  /* [20][0][][] */ 53,-43,41,127,21,-49,-64,62, 
  /* [21][0][][] */ 102,-18,-86,-127,68,-49,2,101, 
  /* [22][0][][] */ -39,-127,-49,-70,46,-41,88,-50, 
  /* [23][0][][] */ -23,29,29,-55,-122,-127,0,-20, 
  /* [24][0][][] */ 127,16,71,63,-21,-29,-103,83, 
  /* [25][0][][] */ 61,54,1,-52,-34,-37,-2,127, 
  /* [26][0][][] */ -74,-32,13,-127,96,-7,-45,-63, 
  /* [27][0][][] */ 99,127,-6,-40,3,65,27,-5, 
  /* [28][0][][] */ 26,88,-20,-14,12,-65,2,127, 
  /* [29][0][][] */ 115,34,116,115,40,-62,-127,81, 
  /* [30][0][][] */ 120,-127,-95,95,58,5,-90,116, 
  /* [31][0][][] */ 105,-70,19,64,-86,-86,-127,44, 
  /* [32][0][][] */ -67,-56,9,-127,78,-31,-46,-64, 
  /* [33][0][][] */ 10,12,42,25,22,-77,127,56, 
  /* [34][0][][] */ -64,94,127,-62,109,-43,-74,87, 
  /* [35][0][][] */ -91,28,37,111,-14,127,48,-9, 
  /* [36][0][][] */ 104,27,-42,-127,56,-1,22,38, 
  /* [37][0][][] */ 39,52,-12,15,-78,127,60,34, 
  /* [38][0][][] */ -20,-76,22,99,21,53,1,127, 
  /* [39][0][][] */ 22,-7,-127,35,2,-29,-32,53, 
  /* [40][0][][] */ 51,23,-79,12,-54,46,-45,127, 
  /* [41][0][][] */ 26,6,18,-41,-112,-127,-9,8, 
  /* [42][0][][] */ -73,69,-104,111,-8,106,-39,-127, 
  /* [43][0][][] */ -5,-9,-39,-127,-10,6,-15,-57, 
  /* [44][0][][] */ 70,29,15,84,40,127,-48,22, 
  /* [45][0][][] */ 4,83,-23,17,127,-37,-84,-11, 
  /* [46][0][][] */ 82,-106,-8,127,88,14,-65,115, 
  /* [47][0][][] */ -28,-90,55,-5,127,32,52,15, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant38_scale = { 48, { 0.0028801979497075081, 0.0026093823835253716, 0.0020546468440443277, 0.0029562388081103563, 0.0015962762990966439, 0.0024676856119185686, 0.001839797361753881, 0.0018671745201572776, 0.0014877502107992768, 0.0022976759355515242, 0.004016585648059845, 0.0012006046017631888, 0.0021010597702115774, 0.0018202704377472401, 0.0014705184148624539, 0.0020359016489237547, 0.0027647835668176413, 0.0013800152810290456, 0.0030684405937790871, 0.0023018133360892534, 0.001923537696711719, 0.00051384855760261416, 0.00067907827906310558, 0.0033106906339526176, 0.0026413672603666782, 0.0027368373703211546, 0.0027485380414873362, 0.0027395118959248066, 0.0026379788760095835, 0.0021082183811813593, 0.00099215225782245398, 0.00091446301667019725, 0.0026292942930012941, 0.0029392358846962452, 0.00086066691437736154, 0.0018029031343758106, 0.0011156371328979731, 0.0030923564918339252, 0.0025476543232798576, 0.0026734876446425915, 0.0019159783842042089, 0.0035591511987149715, 0.0011034490307793021, 0.0033856576774269342, 0.0036985718179494143, 0.0021175858564674854, 0.0017579240957275033, 0.0018032889347523451, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[48] = { 1317, -1383, 4971, 2306, 3872, 180, 2380, 5258, -3955, -2296, -857, 7670, 3866, 4297, 7389, -3251, -2629, 8971, 2408, 3741, 5466, 26571, 16943, 876, -1772, 1383, 64, -929, 1592, 2390, 6988, 12435, -804, 436, 13506, 3766, 10009, 2436, 1629, -2039, 3865, -1522, 10488, -343, 402, 2671, -3443, 5250, };
const TfArray<1, int> tensor_dimension39 = { 1, { 48 } };
const TfArray<48, float> quant39_scale = { 48, { 0.00022742431610822678, 0.00020604034943971783, 0.00016223768761847168, 0.00023342861095443368, 0.00012604413495864719, 0.00019485178927425295, 0.00014527289022225887, 0.00014743462088517845, 0.00011747476673917845, 0.00018142758926842362, 0.00031715503428131342, 9.4801362138241529e-05, 0.00016590251470915973, 0.0001437310129404068, 0.00011611411900958046, 0.00016075753956101835, 0.00021831104822922498, 0.00010896786989178509, 0.00024228820984717458, 0.00018175429431721568, 0.00015188513498287648, 4.0574177546659485e-05, 5.3620937251253054e-05, 0.00026141660055145621, 0.00020856592163909227, 0.00021610436670016497, 0.00021702826779801399, 0.00021631555864587426, 0.00020829837012570351, 0.00016646776930429041, 7.8341683547478169e-05, 7.2207236371468753e-05, 0.00020761262567248195, 0.00023208603670354933, 6.7959423176944256e-05, 0.00014235966955311596, 8.8092216174118221e-05, 0.00024417665554210544, 0.00020116622908972204, 0.00021110218949615955, 0.00015128824452403933, 0.00028103537624701858, 8.7129825260490179e-05, 0.00026733608683571219, 0.00029204422025941312, 0.0001672074431553483, 0.00013880805636290461, 0.00014239012671168894, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*48] = { 
  /* [0][0][][] */ 39,37,41,-75,-76,27,16,81,16,-3,-77,-69,-120,127,-32,12,42,99,41,12,-18,-79,-20,5,98,-127,-1,124,41,-53,85,14,-71,64,26,-38,-12,28,-74,-39,-93,-69,119,-65,90,7,-50,108, 
  /* [1][0][][] */ 53,78,72,127,73,-110,-31,110,-13,41,-117,111,-124,-109,16,-43,-52,-30,-14,-38,101,121,-51,-82,30,28,35,-61,96,21,12,-66,-19,-14,-90,-94,76,-94,-14,65,41,116,-38,107,6,-12,8,96, 
  /* [2][0][][] */ 6,-7,-45,-75,9,32,105,21,41,-58,-41,-9,101,93,-33,-66,-49,49,-44,66,-73,-10,55,61,-48,118,-11,-25,17,-19,-57,75,81,-28,99,18,-33,66,-34,102,109,5,127,116,-64,-3,105,59, 
  /* [3][0][][] */ -57,53,58,-55,87,89,74,60,93,9,38,-51,95,23,93,104,-127,51,-39,88,-44,64,-64,18,93,72,-97,24,57,38,-52,92,-92,31,31,-62,-68,-17,-48,-36,-57,-16,-43,25,-53,-89,-42,-42, 
  /* [4][0][][] */ -15,36,111,50,58,35,-19,1,3,42,-98,2,-24,85,51,-107,109,81,-7,-12,-25,110,-27,-1,-65,-105,121,1,-1,-78,127,70,-32,80,17,17,117,20,-43,-115,98,48,-35,-46,-19,76,-11,28, 
  /* [5][0][][] */ -86,76,-38,-53,20,-19,-32,68,8,-68,75,29,-72,43,118,122,-123,121,111,-5,119,9,-51,118,-106,51,-62,-48,-18,49,65,1,-96,68,70,71,104,-49,-54,-51,80,7,-3,-67,125,127,15,-14, 
  /* [6][0][][] */ 79,-46,-17,-109,-121,-48,31,-114,1,48,4,84,32,-91,-45,91,-88,64,9,64,-127,80,60,12,-78,23,-122,-120,-60,-111,-22,24,-107,-5,47,50,-126,-70,-16,38,-103,22,49,-19,-124,52,-114,-51, 
  /* [7][0][][] */ 50,32,-54,-102,127,-33,2,-74,16,-86,-9,-46,6,77,80,92,59,-21,-54,37,55,-93,-27,-19,112,-9,37,110,-31,-34,-26,2,-98,-27,70,-41,89,7,28,-62,-42,75,-66,54,1,-69,-68,-62, 
  /* [8][0][][] */ -71,-17,-119,-20,65,-13,-30,-110,73,-122,97,-113,-32,-110,-127,8,6,58,62,-79,77,41,75,-25,-69,-101,-3,-95,-58,-93,-115,-19,-59,-12,-103,92,-127,-112,-64,-62,-36,23,23,-33,-26,-72,-39,73, 
  /* [9][0][][] */ -13,-66,31,67,7,69,95,47,43,74,89,51,93,72,-16,-22,-10,-46,-45,-70,-71,81,30,-25,-69,-79,-71,65,58,-89,-18,54,-127,-73,101,-8,-28,9,-63,-89,86,80,21,-10,64,74,41,-17, 
  /* [10][0][][] */ -97,17,-87,-103,-65,67,-127,-108,55,-107,61,32,-24,6,47,-22,64,-16,-86,18,-39,-78,-60,61,4,74,-56,-43,-117,-93,-57,-121,30,17,80,-118,81,-93,-5,70,49,11,12,35,-53,2,-47,-42, 
  /* [11][0][][] */ 62,10,-58,-76,60,-13,-24,-82,-53,50,50,-29,22,-63,40,-47,-106,46,-18,-52,-37,-45,38,-66,-71,78,22,79,10,41,-11,24,10,63,-107,-57,-5,103,-42,-69,39,-83,87,-127,82,20,-87,-37, 
  /* [12][0][][] */ -68,-91,-104,99,-29,-68,-78,-107,-37,-39,-71,6,-97,-127,-80,49,27,-61,14,91,-116,-58,54,30,-56,61,-97,-28,80,-116,58,46,20,-58,-25,-75,-25,-106,76,25,53,65,54,-122,31,-37,-70,82, 
  /* [13][0][][] */ 78,19,75,-82,64,26,26,-52,48,-80,64,25,-34,108,40,52,87,68,23,71,108,-16,7,-96,74,-109,-6,-71,7,-89,-34,-20,-25,-127,7,17,63,-109,57,3,-46,-89,90,50,81,10,82,78, 
  /* [14][0][][] */ -53,-84,80,53,49,-69,27,-18,6,26,-20,-72,12,71,-18,46,-127,-44,-24,-77,-1,30,-58,-21,-25,-9,9,29,74,-64,34,-35,-79,83,101,23,19,72,-65,-70,95,110,93,16,65,-78,-37,-72, 
  /* [15][0][][] */ 9,48,22,-33,-44,80,29,23,-104,-59,77,-47,22,-66,-22,1,14,54,-99,38,-13,-64,-59,7,21,29,94,113,15,-70,-111,37,75,99,-3,-27,-19,108,-4,-57,-16,127,67,-34,46,22,-79,-82, 
  /* [16][0][][] */ 11,-21,-92,118,75,-54,120,122,-8,75,112,-75,-50,107,-107,-17,37,91,-41,-23,-107,-19,-99,19,115,-74,-108,42,-47,119,122,40,-127,-58,15,29,-13,107,-115,52,43,40,99,-64,-70,6,-89,-61, 
  /* [17][0][][] */ 25,115,-51,16,8,76,-2,125,62,11,116,26,3,123,65,-37,48,107,19,100,55,28,-8,21,-52,33,10,-23,-1,76,90,-43,92,8,19,70,71,-13,12,72,-3,119,16,-26,127,57,-36,-39, 
  /* [18][0][][] */ 56,-112,-115,-27,49,14,-114,-103,-61,27,-90,-85,-10,72,8,53,24,65,-94,-45,-94,31,6,27,21,-22,24,-50,-25,-127,12,-119,-36,62,88,-70,13,-51,-72,-50,-107,47,88,-60,-38,22,71,-69, 
  /* [19][0][][] */ 34,61,-88,83,122,62,-44,-8,56,-66,-24,-46,83,42,100,-19,20,-113,-61,111,-84,-80,2,127,77,16,24,-25,92,22,73,-100,64,-6,-64,50,-99,-12,-46,47,84,56,17,70,-64,14,-121,71, 
  /* [20][0][][] */ 9,-124,-17,49,67,36,91,58,-26,-40,39,-9,-46,-66,10,-107,-26,-49,121,42,66,-113,95,-37,-99,78,-120,28,-8,-56,-50,9,5,78,70,-46,95,20,-119,-16,75,-127,-70,-45,67,34,-45,-54, 
  /* [21][0][][] */ 40,80,69,-107,-48,-78,-81,-64,-34,85,15,-106,-85,-80,-105,-101,-60,-45,-83,-120,-43,26,76,-82,76,10,37,-29,-77,-100,80,-15,-120,7,56,73,-127,-96,-116,4,-17,34,-60,-21,-75,68,-109,38, 
  /* [22][0][][] */ -29,-85,65,-36,-87,-105,92,66,52,-15,-53,17,-63,36,-29,-101,-123,-19,-97,75,31,107,-16,82,-127,28,-69,51,-44,-96,-83,-80,-82,89,28,36,24,-105,-88,-67,-35,-6,-72,11,45,-43,109,-81, 
  /* [23][0][][] */ -28,-37,18,-39,-108,17,80,21,49,-78,83,-120,-110,104,79,-34,27,47,66,27,62,104,66,2,64,-58,-101,-51,-95,97,-4,122,59,-73,108,-8,-8,127,87,-101,119,56,118,-121,-79,11,-90,106, 
  /* [24][0][][] */ -19,109,89,85,61,-31,-108,84,-26,-105,-85,89,8,-6,-17,-69,-21,33,-66,68,93,-24,-21,19,-31,55,-33,-61,68,88,98,-30,127,-43,-18,-35,16,-51,-86,-65,2,86,-85,42,-61,56,51,-50, 
  /* [25][0][][] */ 2,-11,-12,53,-29,24,-91,51,10,91,84,54,-113,95,88,-113,-35,4,-61,-5,64,99,-12,63,27,-103,-66,-49,41,83,-67,58,-99,-88,65,127,-102,52,-105,80,-119,73,83,-20,22,-55,-74,-89, 
  /* [26][0][][] */ 53,-62,-24,-26,51,-115,71,-55,20,-48,-106,-15,-59,-83,12,-46,84,-9,-93,-92,24,-68,47,64,-36,-62,33,13,-3,-28,-65,-58,-34,24,22,88,-21,64,-127,84,63,-20,-47,-99,-28,30,91,-6, 
  /* [27][0][][] */ 35,86,-125,87,-16,-47,-18,-24,-107,63,-50,-19,-119,47,55,-59,26,-126,-31,-120,-45,33,59,-101,-73,74,-49,28,70,-79,41,-127,92,-101,16,76,85,32,-86,-20,27,35,-46,53,39,-107,82,-84, 
  /* [28][0][][] */ -93,80,-39,70,-13,100,-94,6,80,-39,-78,72,51,-55,30,-114,-65,83,53,91,106,76,19,-93,65,-91,61,118,-63,35,-12,41,-38,1,-41,-38,35,104,-34,77,-110,-41,11,45,127,122,-2,10, 
  /* [29][0][][] */ 25,-47,44,27,-23,13,37,-101,-50,-80,-50,-83,82,-62,-69,-9,43,92,-63,102,43,-58,-85,-74,96,-51,-127,-49,-31,98,-72,36,-124,121,117,9,-23,-78,39,-17,121,-40,-11,-11,-73,48,-119,-9, 
  /* [30][0][][] */ -97,-58,-107,-74,43,57,20,-27,-103,4,-2,28,65,22,-127,-127,62,74,43,-20,-41,-99,85,-89,-15,35,-42,-18,53,-74,-22,12,-13,-53,-3,-1,-108,-58,51,-29,-34,-107,-95,-74,43,78,-65,-57, 
  /* [31][0][][] */ 15,108,86,-24,-47,-5,115,-90,-114,-87,20,-66,-58,-119,98,45,-23,26,-63,41,-13,-35,78,28,73,111,-32,-70,0,74,31,80,92,53,78,88,54,127,8,-60,17,127,-115,65,-9,71,22,-24, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0025362118612974882, 0.0021443534642457962, 0.002314205514267087, 0.0030054091475903988, 0.0030775105115026236, 0.0023148767650127411, 0.0024553677067160606, 0.002647849265486002, 0.002390941372141242, 0.0023795189335942268, 0.0024852470960468054, 0.0027849108446389437, 0.0023055230267345905, 0.0024060541763901711, 0.0027619886677712202, 0.0030169100500643253, 0.0022404096089303493, 0.0027960895095020533, 0.0025202257093042135, 0.0024533625692129135, 0.0023776476737111807, 0.0025114160962402821, 0.0025407110806554556, 0.0021862962748855352, 0.002606001915410161, 0.002494435291737318, 0.0024722910020500422, 0.0024688346311450005, 0.0023868700955063105, 0.002360387472435832, 0.0024652050342410803, 0.00219125603325665, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { 625, 506, 1326, 186, 2370, 319, -768, -659, -733, 386, -896, -298, -580, 392, 56, -147, 332, 1848, -684, -598, 124, -1268, 181, 332, -375, 382, -893, -886, 425, 390, -1103, -132, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 5.9082438383484259e-05, 4.9953883717535064e-05, 5.3910680435365066e-05, 7.0012647483963519e-05, 7.1692287747282535e-05, 5.3926316468277946e-05, 5.7199129514629021e-05, 6.1683094827458262e-05, 5.5698284995742142e-05, 5.5432192311855033e-05, 5.7895187637768686e-05, 6.4876017859205604e-05, 5.3708416089648381e-05, 5.6050346756819636e-05, 6.4342035329900682e-05, 7.0280570071190596e-05, 5.2191564464010298e-05, 6.5136431658174843e-05, 5.8710033044917509e-05, 5.7152421504724771e-05, 5.538860204978846e-05, 5.8504807384451851e-05, 5.9187252190895379e-05, 5.0930964789586142e-05, 6.0708236560458317e-05, 5.8109231758862734e-05, 5.7593370001995936e-05, 5.7512850617058575e-05, 5.5603442888241261e-05, 5.4986514442134649e-05, 5.742829671362415e-05, 5.1046506996499375e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[3*1*1*32] = { 
  /* [0][0][][] */ -46,114,-32,-25,127,-51,-68,-105,53,-37,7,-108,51,88,-70,-49,-74,-23,-78,18,-7,-71,103,-44,24,41,46,-22,35,74,-49,71, 
  /* [1][0][][] */ 113,-75,-107,1,-16,55,-97,-48,-57,127,59,23,89,98,3,-86,119,16,-88,-89,102,11,-8,59,-100,86,-9,-17,79,-23,-51,-30, 
  /* [2][0][][] */ -46,-102,96,110,-47,67,-98,64,-46,36,-104,81,22,-81,106,48,77,-127,-77,101,14,2,24,50,-103,-50,6,-14,8,89,-43,63, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant42_scale = { 3, { 0.0040322220884263515, 0.0031050608959048986, 0.003292447654530406, } };
const TfArray<3, int> quant42_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[3] = { 23799, -35120, -34706, };
const TfArray<1, int> tensor_dimension43 = { 1, { 3 } };
const TfArray<3, float> quant43_scale = { 3, { 0.0001530342415207997, 0.00011784584785345942, 0.00012495770351961255, } };
const TfArray<3, int> quant43_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.065488956868648529, } };
const TfArray<1, int> quant46_zero = { 1, { 30 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.076687909662723541, } };
const TfArray<1, int> quant47_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.049247942864894867, } };
const TfArray<1, int> quant51_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.082950085401535034, } };
const TfArray<1, int> quant54_zero = { 1, { -35 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.094127118587493896, } };
const TfArray<1, int> quant55_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.019919004291296005, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.046366095542907715, } };
const TfArray<1, int> quant59_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.01661914587020874, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.021075434982776642, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.030522646382451057, } };
const TfArray<1, int> quant62_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.068139247596263885, } };
const TfArray<1, int> quant63_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.022120516747236252, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.019580619409680367, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.047948874533176422, } };
const TfArray<1, int> quant66_zero = { 1, { -38 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.07896135002374649, } };
const TfArray<1, int> quant67_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.02329554595053196, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.037952829152345657, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.061712697148323059, } };
const TfArray<1, int> quant70_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,8,9 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,10,11 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,12,13 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,14,15 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,16,17 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,18,19 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,20,21 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,22,23 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,24,25 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,26,27 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,28,29 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,30,31 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,32,33 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,34,35 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,36,37 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,38,39 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,40,41 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,42,43 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9216, (TfLiteIntArray*)&tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4608, (TfLiteIntArray*)&tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension47, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension48, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension49, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension56, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension57, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4608, (TfLiteIntArray*)&tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension60, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension61, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension62, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4320, (TfLiteIntArray*)&tensor_dimension63, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension64, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2016, (TfLiteIntArray*)&tensor_dimension66, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension67, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension69, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension70, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
  if (i < 0) {
    tensor->data.data = nullptr;
    tensor->dims = nullptr;
    return;
  }

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  71, 
};
TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
